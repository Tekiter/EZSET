{"version":3,"sources":["../../../src/api/v1/auth.route.js"],"names":["router","loginNotRequired","route","post","isString","validateParams","req","res","user","User","findOne","where","equals","body","username","checkPassword","password","accessToken","auth","createAccessToken","status","json","PreUser","message","error","err","Error","isEmail","optional","checkFalsy","idreg","test","pwreg","exists","count","existsPreuser","userData","info","realname","email","save","exits","end","editToken","createEditToken","decoded","checkToken","edittoken","is_edit_token"],"mappings":"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","file":"auth.route.js","sourcesContent":["import { Router } from 'express'\nimport { body } from 'express-validator'\n\nimport { getConfig } from '../../utils/config'\nimport auth from '../../utils/auth'\nimport {\n    databaseError,\n    unexpectedError,\n    validateParams,\n    asyncRoute,\n} from '../../utils/api'\nimport User from '../../models/User'\nimport PreUser from '../../models/PreUser'\n\nconst router = Router()\nrouter.loginNotRequired = true\n\n/**\n * @api {post} /auth/login 로그인\n * @apiName 로그인\n * @apiGroup Auth\n *\n * @apiParam {String} username 로그인 할 아이디\n * @apiParam {String} password 로그인 할 비밀번호\n *\n * @apiSuccess {JWT} accessToken 로그인 인증 토큰\n *\n * @apiSuccessExample Success-Response:\n *  HTTP/1.1 200 OK\n *  {\n *    \"accessToken\": \"<JWT-LOGIN-TOKEN>\"\n *  }\n */\nrouter.route('/login').post(\n    [body('username').isString(), body('password').isString(), validateParams],\n    asyncRoute(async (req, res) => {\n        try {\n            const user = await User.findOne()\n                .where('username')\n                .equals(req.body.username)\n\n            if (user && user.checkPassword(req.body.password)) {\n                const accessToken = await auth.createAccessToken(user)\n\n                res.status(200).json({\n                    accessToken,\n                })\n            } else {\n                const user = await PreUser.findOne()\n                    .where('username')\n                    .equals(req.body.username)\n\n                if (user) {\n                    res.status(403).json({ message: '가입 승인 대기중입니다.' })\n                } else {\n                    res.status(403).json({\n                        message: '올바르지 않은 아이디 또는 비밀번호입니다.',\n                    })\n                }\n            }\n        } catch (error) {\n            const err = new Error('알 수 없는 오류가 발생했습니다.')\n            err.status = 500\n            throw err\n        }\n    })\n)\n\n/**\n * @api {post} /auth/register 유저 회원가입\n * @apiName 유저 회원가입\n * @apiGroup Auth\n *\n * @apiParam {String} username 유저 아이디\n * @apiParam {String} password 유저 비밀번호\n * @apiParam {String} realname 유저 실명\n * @apiParam {Email} email 유저 이메일\n *\n * @apiSuccess {Number} 201 유저 회원가입 성공\n * @apiSuccessExample Success-Response:\n *  HTTP/1.1 201 OK\n */\nrouter.route('/register').post(\n    [\n        body('username').isString(),\n        body('password').isString(),\n        body('realname').isString(),\n        body('email')\n            .isEmail()\n            .optional({ checkFalsy: true }),\n        validateParams,\n    ],\n    asyncRoute(async (req, res) => {\n        let idreg = /^[a-z0-9]{6,12}$/\n        if (!idreg.test(req.body.username)) {\n            res.status(400).json({\n                message:\n                    '아이디는 6~12자의 영문 소문자, 숫자만 사용 가능합니다.',\n            })\n            return\n        }\n\n        let pwreg = /^(?=.*[A-Za-z]+)(?=.*[0-9]+)(?=.*[`~!@#$%^&*()\\-_+=;:\"'?.,<>[\\]{}/\\\\|]*).{8,32}$/\n        if (!pwreg.test(req.body.password)) {\n            res.status(400).json({\n                message:\n                    '비밀번호는 8자 이상의 영문자와 숫자를 필수로 사용해야 합니다.',\n            })\n            return\n        }\n\n        const exists = await User.count()\n            .where('username')\n            .equals(req.body.username)\n\n        const existsPreuser = await PreUser.count()\n            .where('username')\n            .equals(req.body.username)\n\n        if (exists || existsPreuser) {\n            res.status(409).json({\n                message: '이미 사용중인 아이디입니다.',\n            })\n            return\n        }\n\n        const userData = {\n            username: req.body.username,\n            password: req.body.password,\n            info: {\n                realname: req.body.realname,\n                email: req.body.email,\n            },\n        }\n\n        // 회원승인제 설정이 도입되어있으면 PreUser 에 회원가입 넣기\n        let user\n        if (await getConfig('usePreUser', false)) {\n            user = new PreUser(userData)\n        } else {\n            user = new User(userData)\n        }\n        await user.save()\n\n        res.status(201).json({\n            message: 'success',\n        })\n    })\n)\n\n/**\n * @api {post} /auth/register/doublecheck/username 유저 중복 아이디 체크\n * @apiName 유저 중복 아이디 체크\n * @apiGroup Auth\n * @apiDescription 유저가 화원가입 할 시 username을 중복 체크\n *\n * @apiParam {String} username 유저 아이디\n *\n * @apiSuccess {Number} 200 사용할 수 있는 아이디\n *\n * @apiError {Number} 409 username 중복 에러\n * @apiErrorExample {json} Error-Response:\n *       HTTP/1.1 409\n *       {\n *          message: '이미 사용중인 아이디입니다.',\n *        }\n */\nrouter.route('/register/doublecheck/username').post(\n    [body('username').isString(), validateParams],\n    asyncRoute(async (req, res) => {\n        try {\n            const exits = await User.count()\n                .where('username')\n                .equals(req.body.username)\n            const existsPreuser = await PreUser.count()\n                .where('username')\n                .equals(req.body.username)\n\n            if (exits || existsPreuser) {\n                res.status(409).json({\n                    message: '이미 사용중인 아이디입니다.',\n                })\n                return\n            }\n            res.status(200).end()\n        } catch (error) {\n            unexpectedError(res, error)\n        }\n    })\n)\n\n/**\n * @api {post} /auth/edittoken/issue 유저 회원정보 보안 토큰 발급\n * @apiName 유저 회원정보 보안 토큰 발급\n * @apiGroup Auth\n *\n * @apiParam {String} username 유저 아이디\n * @apiParam {String} password 유저 비밀번호\n *\n * @apiSuccess {JWT} editToken 회원정보 보안 토큰\n * @apiSuccessExample Success-Response:\n *  HTTP/1.1 200 OK\n *\n * @apiError {Number} 403 회원정보 보안 토큰 발급 실패 에러\n * @apiErrorExample {json} Error-Response:\n *       HTTP/1.1 403\n *       {\n *          message: '토큰 발급 실패',\n *        }\n */\nrouter.route('/edittoken/issue').post(\n    [body('username').isString(), body('password').isString(), validateParams],\n    asyncRoute(async (req, res) => {\n        try {\n            const user = await User.findOne()\n                .where('username')\n                .equals(req.body.username)\n\n            if (user && user.checkPassword(req.body.password)) {\n                const editToken = await auth.createEditToken(req.body.username)\n\n                res.status(200).json({\n                    editToken,\n                })\n            } else {\n                res.status(403).json({ message: '토큰 발급 실패' })\n            }\n        } catch (error) {\n            databaseError(res, error)\n        }\n    })\n)\n\n/**\n * @api {post} /auth/edittoken/check 유저 회원정보 보안 토큰 유효성 검사\n * @apiName 유저 회원정보 보안 토큰 유효성 검사\n * @apiGroup Auth\n *\n * @apiParam {JWT} editToken 회원정보 보안 토큰\n *\n * @apiSuccess {Number} 200 회원정보 보안 토큰이 유효함\n *\n * @apiError {Number} 403 회원정보 보안 토큰이 유효하지 않음\n */\nrouter.route('/edittoken/check').post(\n    [body('edittoken').isString(), validateParams],\n    asyncRoute(async (req, res) => {\n        try {\n            const decoded = await auth.checkToken(req.body.edittoken)\n            if (\n                decoded.is_edit_token &&\n                decoded.username === req.user.username\n            ) {\n                res.status(200).end()\n            }\n        } catch (err) {\n            res.status(403).end()\n        }\n    })\n)\nexport default router\n"]}