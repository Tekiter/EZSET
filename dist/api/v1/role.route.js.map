{"version":3,"sources":["../../../src/api/v1/role.route.js"],"names":["router","get","canOwn","validateParams","req","res","userRoles","role","getUserRoles","user","username","userPerms","map","i","roles","export","perm","json","perms","can","getRoleNames","filter","item","includes","tag","sort","a","b","name","localeCompare","post","isString","newrole","createRole","body","permissions","managePage","hasRole","params","role_tag","roleobj","err","Error","status","custom","checkRoleTag","users","User","find","select","realname","info","patch","optional","isArray","resource","action","range","getRole","context","param","undefined","allow","cannot","updateRole","end","delete","removeRole"],"mappings":"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","file":"role.route.js","sourcesContent":["/*\nrole.route.js\nRole과 거기에 대한 권한을 관리하는 API\n\n*/\n\nimport { Router } from 'express'\nimport { validateParams, asyncRoute, checkRoleTag } from '../../utils/api'\nimport { body, param } from 'express-validator'\nimport role, { perm, roles } from '../../utils/role'\nimport permissions from '../../utils/role/permissions'\nimport User from '../../models/User'\n\nconst router = Router()\n\nrouter.get(\n    '/me',\n    [perm('role').canOwn('read'), validateParams],\n    asyncRoute(async (req, res) => {\n        const userRoles = await role.getUserRoles(req.user.username)\n        const userPerms = userRoles.map(i => {\n            return role.roles.export(i).perm\n        })\n\n        res.json({\n            roles: userRoles,\n            perms: [role.roles.export('default').perm, ...userPerms],\n        })\n    })\n)\n\n// 모든 역할 목록 조회\nrouter.get(\n    '/',\n    [perm('role').can('modify'), validateParams],\n    asyncRoute(async (req, res) => {\n        let roles = await role.getRoleNames()\n\n        roles = roles\n            .filter(item => !['admin', 'default'].includes(item.tag))\n            .sort((a, b) => a.name.localeCompare(b.name))\n\n        res.json([\n            { tag: 'default', name: '모든 유저' },\n            { tag: 'admin', name: '관리자' },\n            ...roles,\n        ])\n    })\n)\n\n// 역할 생성\nrouter.post(\n    '/',\n    [perm('role').can('modify'), body('name').isString(), validateParams],\n    asyncRoute(async (req, res) => {\n        // if (req.user.perm('role').can('create')) {\n        //     const newrole = await role.createRole({ name: req.body.name })\n        //     res.json(newrole)\n        // } else {\n        //     const err = new Error('권한이 없습니다.')\n        //     err.status = 403\n        //     throw err\n        // }\n        const newrole = await role.createRole({\n            name: req.body.name,\n        })\n        res.json(newrole)\n    })\n)\n\nrouter.get(\n    '/managepage',\n    [validateParams],\n    asyncRoute(async (req, res) => {\n        res.json(permissions.managePage)\n    })\n)\n\n// 역할 정보 조회\nrouter.get(\n    '/:role_tag',\n    [param('role_tag').isString(), validateParams],\n    asyncRoute(async (req, res) => {\n        if (role.roles.hasRole(req.params.role_tag)) {\n            const roleobj = role.roles.export(req.params.role_tag)\n            res.json(roleobj)\n        } else {\n            const err = new Error('invalid role tag')\n            err.status = 404\n            throw err\n        }\n    })\n)\n\n// 역할 유저 조회\nrouter.get(\n    '/:role_tag/users',\n    [param('role_tag').custom(checkRoleTag), validateParams],\n    asyncRoute(async (req, res) => {\n        const users = await User.find({ roles: req.params.role_tag }).select(\n            'username info'\n        )\n        res.json({\n            users: users.map(user => {\n                return { username: user.username, realname: user.info.realname }\n            }),\n        })\n    })\n)\n\n// 역할 권한 변경\nrouter.patch(\n    '/:role_tag',\n    [\n        perm('role').can('modify'),\n        param('role_tag').custom(checkRoleTag),\n        body('name')\n            .isString()\n            .optional(),\n        body('perms').isArray(),\n        validateParams,\n    ],\n    asyncRoute(async (req, res) => {\n        if (req.params.role_tag == 'admin') {\n            const err = new Error('admin 역할은 변경할 수 없습니다.')\n            err.status = 400\n            throw err\n        }\n\n        // Validation\n        // 올바른 perm 배열인지 체크\n        for (let item of req.body.perms) {\n            if (\n                !item.resource ||\n                !item.action ||\n                !(item.range || item.range == 'any' || item.range == 'own')\n            ) {\n                const err = new Error('Invalid action')\n                err.status = 400\n                throw err\n            }\n        }\n\n        // 역할 name 변경\n        if (req.body.name) {\n            roles.getRole(req.params.role_tag).name = req.body.name\n        }\n\n        // 수정할 데이터를 Role 에 반영\n        const context = roles.role(req.params.role_tag)\n        for (let item of req.body.perms) {\n            const resource = context.resource(\n                item.resource,\n                item.param != undefined ? item.param + '' : undefined\n            )\n            if (item.allow) {\n                resource.can(item.action, item.range)\n            } else {\n                resource.cannot(item.action, item.range)\n            }\n        }\n\n        await role.updateRole(req.params.role_tag)\n\n        res.end()\n    })\n)\n\n// 역할 제거\nrouter.delete(\n    '/:role_tag',\n    [\n        perm('role').can('modify'),\n        param('role_tag').custom(checkRoleTag),\n        validateParams,\n    ],\n    asyncRoute(async (req, res) => {\n        if (req.params.role_tag == 'admin') {\n            const err = new Error('admin 역할은 삭제할 수 없습니다.')\n            err.status = 400\n            throw err\n        }\n        if (req.params.role_tag == 'default') {\n            const err = new Error('default 역할은 삭제할 수 없습니다.')\n            err.status = 400\n            throw err\n        }\n\n        await role.removeRole(req.params.role_tag)\n\n        res.end()\n\n        // NOT IMPLEMENTED\n    })\n)\n\nexport default router\n"]}