{"version":3,"sources":["../../../src/api/v1/penaltyconfig.route.js"],"names":["router","get","can","req","res","cursor","PenaltyConfig","find","json","post","isString","isNumeric","validateParams","cnt","where","equals","body","key","count","status","penaltyConfig","value","save","end","delete","query","err","Error","Penalty","deleteMany","type_id","params","id","findOneAndDelete","_id","findOneAndUpdate"],"mappings":"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","file":"penaltyconfig.route.js","sourcesContent":["import Router from 'express'\nimport { asyncRoute, validateParams } from '../../utils/api'\nimport PenaltyConfig from '../../models/Penalty/PenaltyConfig'\nimport { perm } from '../../utils/role'\nimport { param, body, query } from 'express-validator'\nimport Penalty from '../../models/Penalty/Penalty'\nconst router = Router()\n\n/**\n * @api {get} /penaltyconfig/read/ 상벌점 항목 조회\n * @apiDescription 사용자의 상벌점 항목 조회\n * @apiName penaltyconfigRead\n * @apiGroup PenaltyConfig\n * @apiPermission penalty.can.read\n *\n * @apiSuccess {Array} - 상벌점 항목을 배열로 반환\n * @apiSuccess {String} type 상벌점 항목의 이름\n * @apiSuccess {Number} value 상벌점 항목의 점수\n *\n * @apiSuccessExample {json} Success-Response:\n *      HTTP/1.1 200 OK\n *      {\n *          [{\n *              type:\"지각\",\n *              date:\"2020-03-19\",\n *              description:\"지각\",\n *              point:-1\n *          }]\n *      }\n */\nrouter.get(\n    '/read',\n    [perm('penalty').can('read')],\n    asyncRoute(async function(req, res) {\n        const cursor = await PenaltyConfig.find()\n        res.json(cursor)\n    })\n)\n\n/**\n * @api {post} /penaltyconfig/write/ 상벌점 항목 생성\n * @apiDescription 상벌점 항목 생성\n * @apiName penaltyconfigWrite\n * @apiGroup PenaltyConfig\n * @apiPermission penalty.can.update\n *\n * @apiParam {String} key 상벌점 항목 이름\n * @apiParam {String} value 상벌점 점수\n *\n * @apiParamExample {post} Request-Example:\n *      {\n *          key : \"과제 지각\",\n *          value : \"-1\"\n *      }\n *\n * @apiSuccess {200} code 기록 성공시 코드\n *\n * @apiSuccessExample {json} Success-Response:\n *      HTTP/1.1 200 OK\n */\nrouter.post(\n    '/write',\n    [\n        perm('penalty').can('update'),\n        body('key').isString(),\n        body('value').isNumeric(),\n        validateParams,\n    ],\n    asyncRoute(async function(req, res) {\n        const cnt = await PenaltyConfig.find()\n            .where('key')\n            .equals(req.body.key)\n            .count()\n        if (cnt > 0) return res.status(406).json()\n        var penaltyConfig = new PenaltyConfig()\n        penaltyConfig.key = req.body.key\n        penaltyConfig.value = req.body.value\n        penaltyConfig.save()\n        res.end()\n    })\n)\n\n/**\n * @api {post} /penaltyconfig/delete/ 상벌점 항목 삭제\n * @apiDescription 상벌점 항목 삭제\n * @apiName penaltyconfigDelete\n * @apiGroup PenaltyConfig\n * @apiPermission penalty.can.update\n *\n * @apiParam {String} key 상벌점 항목 이름\n *\n * @apiParamExample {post} Request-Example:\n *      {\n *          key : \"과제 지각\",\n *      }\n *\n * @apiSuccess {200} code 기록 성공시 코드\n *\n * @apiSuccessExample {json} Success-Response:\n *      HTTP/1.1 200 OK\n */\n\nrouter.delete(\n    '/:id', [\n        perm('penalty').can('update'),\n        param('id').isString(),\n        query('key').isString(),\n        validateParams,\n    ],\n    asyncRoute(async function(req, res) {\n        if (req.query.key == '지각') {\n            const err = new Error('지각 항목은 삭제할 수 없습니다.')\n            err.status = 400\n            throw err\n        }\n        if (req.query.key == '결석') {\n            const err = new Error('결석 항목은 삭제할 수 없습니다.')\n            err.status = 400\n            throw err\n        }\n        await Penalty.deleteMany({\n            type_id: req.params.id,\n        })\n        await PenaltyConfig.findOneAndDelete({\n            _id: req.params.id,\n        })\n        res.end()\n    })\n)\n\n/**\n * @api {post} /penaltyconfig/update/ 상벌점 항목 수정\n * @apiDescription 상벌점 항목의 점수 수정\n * @apiName penaltyconfigUpdate\n * @apiGroup PenaltyConfig\n * @apiPermission penalty.can.update\n *\n * @apiParam {String} key 상벌점 항목 이름\n *\n * @apiParamExample {post} Request-Example:\n *      {\n *          key : \"과제 지각\",\n *          value : -1\n *      }\n *\n * @apiSuccess {200} code 기록 성공시 코드\n *\n * @apiSuccessExample {json} Success-Response:\n *      HTTP/1.1 200 OK\n */\nrouter.post(\n    '/update',\n    [\n        perm('penalty').can('update'),\n        body('_id').isString(),\n        body('key').isString(),\n        body('value').isNumeric(),\n        validateParams,\n    ],\n    asyncRoute(async function(req, res) {\n        await PenaltyConfig.findOneAndUpdate({\n            _id: req.body._id,\n        }, {\n            key: req.body.key,\n            value: req.body.value,\n        })\n\n        res.end()\n    })\n)\nexport default router\n"]}