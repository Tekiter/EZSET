{"version":3,"sources":["../../../src/api/v1/absencecheck.route.js"],"names":["router","moment","require","post","canOwn","isArray","isString","validateParams","req","res","Name","user","username","Reason","body","dayList","approval","k","cursor","OfficialAbsence","name","day","reason","save","json","err","status","get","officialAbsence","find","where","equals","params","deleteOne","can","cursor_No","$gte","format","sort","cursor_Yes","convertAb","curlist","newlist","cur","push","realname","noanswer","yesanswer","isBoolean","findOneAndUpdate","doc"],"mappings":"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","file":"absencecheck.route.js","sourcesContent":["import Router from 'express'\nimport { asyncRoute, validateParams } from '../../utils/api'\nimport OfficialAbsence from '../../models/officialAbsenceReason'\nimport { perm } from '../../utils/role'\nimport { getRealname } from '../../utils/user'\nimport { param, body } from 'express-validator'\nconst router = Router()\nvar moment = require('moment')\n\n/**\n * @api {post} /absencecheck/absenceBook/ 공결예약\n * @apiDescription 사용자가 결석예약 날짜들을 선택하면 프론트에서 list 형태로 back에 전달하고 db에 해당 정보를 날짜별로 각각 저장한다.\n * @apiName BookedOfficialAbsence\n * @apiGroup OfficialAbsence\n * @apiPermission absence.canOwn'create')\n *\n * @apiParam {Array} dayList 공결이 예약된 날짜\n * @apiParam {String} Reason 공결 신청 사유\n *\n * @apiParamExample {json} Example usage:\n * {\n *  \"dayList\": [2020-03-02, 2020-03-05],\n *  \"Reason\": \"가족여행\"\n * }\n */\nrouter.post(\n    '/absenceBook',\n    [\n        perm('absence').canOwn('create'),\n        body('dayList').isArray(),\n        body('Reason').isString(),\n        validateParams,\n    ],\n    asyncRoute(async function(req, res) {\n        var Name = req.user.username\n        var Reason = req.body.Reason\n        var dayList = req.body.dayList\n        var approval = false\n        try {\n            //백에서 list안의 원소를 각 날짜별로 결석 내용 저장 officialabsencereason\n            for (var k in dayList) {\n                var cursor = new OfficialAbsence()\n                cursor.name = Name\n                cursor.day = dayList[k]\n                cursor.reason = Reason\n                cursor.approval = approval\n                cursor.save()\n            }\n            res.json(200)\n        } catch (err) {\n            res.status(501).json(err)\n        }\n    })\n)\n\n//AttendanceManagMonthUser 페이지에서 사용\n/**\n * @api {get} /absencecheck/absenceUserData/ 공결 현황\n * @apiDescription officialAbsences Collection에서 자신(로그인한 사용자)의 공결 현황을 전부 가지고 옴\n * @apiName OfficialAbsenceStates\n * @apiGroup OfficialAbsence\n * @apiPermission attendance.canOwn('read')\n *\n * @apiSuccess {object} object\n *\n * @apiSuccessExample {json} Request-Response:\n * [\n *  {\n *  \"_id\": \"5e3a6d318368e4cbe88a52bc\",\n * \"name\": \"admin\",\n * \"day\": \"2020-02-12T00:00:00.000Z\",\n * \"reason\": \"여행\",\n * \"approval\": true,\n * \"__v\": 0\n * }\n * ,\n * {\n * \"_id\": \"5e61e45fa48a7b2d508566c0\",\n * \"name\": \"admin\",\n * \"day\": \"2020-03-06T00:00:00.000Z\",\n * \"reason\": \"코로나19로 인해 결석합니다\",\n * \"approval\": false,\n * \"__v\": 0\n * }\n * ]\n */\nrouter.get(\n    '/absenceUserData',\n    [perm('attendance').canOwn('read')],\n    asyncRoute(async function(req, res) {\n        try {\n            const officialAbsence = await OfficialAbsence.find()\n                .where('name')\n                .equals(req.user.username)\n            res.json(officialAbsence)\n        } catch (err) {\n            res.status(501).json()\n        }\n    })\n)\n\n//AttendanceManageDay 페이지에서 사용\n/**\n * @api {get} /absencecheck/absenceUsersData/:day 일별공결현황\n * @apiDescription officialAbsences Collection에서 day에 해당되는 일 단위 공결 현황을 전부 가지고 옴\n * @apiName OfficialAbsenceDayStates\n * @apiGroup OfficialAbsence\n * @apiPermission absence.canOwn('read')\n *\n * @apiParam {String} day 출석한 날짜\n * @apiParamExample {json} Example usage:\n * {\n *  http://localhost:5000/api/v1/absencecheck/absenceusersdata/2020-03-06\n * }\n *\n * @apiSuccess {object} object\n *\n * @apiSuccessExample {json} Request-Response:\n * [\n * {\n *   \"_id\": \"5e61e45fa48a7b2d508566c0\",\n * \"name\": \"admin\",\n * \"day\": \"2020-03-06T00:00:00.000Z\",\n * \"reason\": \"코로나19로 인해 결석합니다\",\n * \"approval\": false,\n * \"__v\": 0\n * }\n * ]\n */\nrouter.get(\n    '/absenceUsersData/:day',\n    [perm('absence').canOwn('read'), param('day').isString(), validateParams],\n    asyncRoute(async function(req, res) {\n        try {\n            const officialAbsence = await OfficialAbsence.find()\n                .where('day')\n                .equals(req.params.day)\n            res.status(200).json(officialAbsence)\n        } catch (err) {\n            res.status(501).json()\n        }\n    })\n)\n\n//AttendanceManagMonthUser 페이지에서 사용\n/**\n * @api {delete} /absencecheck/deleteAbsenceUser/ 공결 신청 취소\n * @apiDescription 사용자의 공결 신청 내역 삭제\n * @apiName DeleteOfficialAbsence\n * @apiGroup OfficialAbsence\n * @apiPermission absence.canOwn('delete')\n *\n * @apiParam {String} reason 공결 신청 사유\n * @apiParam {String} day 신청 날짜\n *\n * @apiParamExample {json} Request-Response:\n * {\n *  \"reason\": \"가족여행\",\n * \"day\": \"2020-03-11\"\n * }\n */\nrouter.post(\n    '/deleteAbsenceUser',\n    [\n        perm('absence').canOwn('delete'),\n        body('reason').isString(),\n        body('day').isString(),\n        validateParams,\n    ],\n    asyncRoute(async function(req, res) {\n        try {\n            await OfficialAbsence.deleteOne({\n                name: req.user.username,\n                reason: req.body.reason,\n                day: req.body.day,\n            })\n            res.status(200).json()\n        } catch (err) {\n            res.status(501).json()\n        }\n    })\n)\n\n//OfficialAbsenceAccept 페이지에서 사용\n/**\n * @api {get} /absencecheck/officialAbsenceList 공결신청 리스트\n * @apiDescription 오늘날짜 이후의 공결신청 리스트 반환\n * @apiName OfficialAbsenceList\n * @apiGroup OfficialAbsence\n * @apiPermission absence.can('update')\n *\n *\n * @apiSuccess {array} noanswer 공결신청 승인 안 된 리스트\n * @apiSuccess {array} yesanswer 공결신청 승인 된 리스트\n *\n * @apiSuccessExample {json} Request-Response:\n * {\n * \"noanswer\":[\n * {\"_id\": \"5e46479c9a8e6a2b403531d2\", \"name\": \"admin\", \"day\": \"2020-03-17T00:00:00.000Z\",…},\n * {\"_id\": \"5e46479c9a8e6a2b403531d3\", \"name\": \"admin\", \"day\": \"2020-03-19T00:00:00.000Z\",…}\n * ],\n * yesanswer\":[\n * {\"_id\": \"5e61f4aa0ce72701e8f91a74\", \"name\": \"helloworld\", \"day\": \"2020-03-11T00:00:00.000Z\",…}\n * ]\n * }\n */\nrouter.get(\n    '/officialAbsenceList',\n    [perm('absence').can('update'), validateParams],\n    asyncRoute(async function(req, res) {\n        try {\n            const cursor_No = await OfficialAbsence.find({\n                day: { $gte: moment().format('YYYY-MM-DD') },\n                approval: false,\n            }).sort({ name: 1 })\n            const cursor_Yes = await OfficialAbsence.find({\n                day: { $gte: moment().format('YYYY-MM-DD') },\n                approval: true,\n            }).sort({ name: 1 })\n\n            const convertAb = async curlist => {\n                const newlist = []\n                for (let cur of curlist) {\n                    newlist.push({\n                        name: cur.name,\n                        realname: await getRealname(cur.name),\n                        day: cur.day,\n                        reason: cur.reason,\n                        approval: cur.approval,\n                    })\n                }\n                return newlist\n            }\n\n            res.json({\n                noanswer: await convertAb(cursor_No),\n                yesanswer: await convertAb(cursor_Yes),\n            })\n        } catch (err) {\n            res.status(501).json()\n        }\n    })\n)\n\n//body : name(String), day(String), approval(Boolean)\n//OfficialAbsenceAccept 페이지에서 사용\n/**\n * @api {post} /absencecheck/deleteAbsenceUser/ 공결 승인, 승인 취소\n * @apiDescription 공결 승인된, 승인안된 내역 저장\n * @apiName OfficialAbsenceAccept\n * @apiGroup OfficialAbsence\n * @apiPermission absence.can('update')\n *\n * @apiParam {String} name 신청한사람\n * @apiParam {String} day 신청 날짜\n * @apiParam {Boolean} approval 승인여부(true일 경우 승인, false일 경우 승인안됨)\n *\n * @apiParamExample {json} Request-Response:\n * {\n *  \"name\": \"admin\",\n *  \"day\": \"2020-03-11\",\n *  \"approval\": true\n * }\n */\nrouter.post(\n    '/officialAbsenceAccept',\n    [\n        perm('absence').can('update'),\n        body('name').isString(),\n        body('day').isString(),\n        body('approval').isBoolean(),\n        validateParams,\n    ],\n    asyncRoute(async function(req, res) {\n        try {\n            const cursor = await OfficialAbsence.findOneAndUpdate(\n                {\n                    name: req.body.name,\n                    day: req.body.day,\n                },\n                { approval: req.body.approval },\n                function(err, doc) {}\n            )\n            res.json(cursor)\n        } catch (err) {\n            res.status(501).json()\n        }\n    })\n)\n\nexport default router\n"]}