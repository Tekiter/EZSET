{"version":3,"sources":["../../../src/api/v1/preuser.route.js"],"names":["router","get","can","req","res","users","PreUser","find","json","map","user","username","timestamp","realname","info","email","post","isString","validateParams","findOne","where","equals","params","err","Error","status","accept","remove","end","delete"],"mappings":";;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEA,MAAMA,SAAS,sBAAf;;AAEA;AACAA,OAAOC,GAAP,CACI,GADJ,EAEI,CAAC,gBAAK,gBAAL,EAAuBC,GAAvB,CAA2B,QAA3B,CAAD,CAFJ,EAGI,qBAAW,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC3B,UAAMC,QAAQ,MAAMC,kBAAQC,IAAR,EAApB;;AAEAH,QAAII,IAAJ,CAAS;AACLH,eAAOA,MAAMI,GAAN,CAAUC,QAAQ;AACrB,mBAAO;AACHC,0BAAUD,KAAKC,QADZ;AAEHC,2BAAWF,KAAKE,SAFb;AAGHC,0BAAUH,KAAKI,IAAL,CAAUD,QAHjB;AAIHE,uBAAOL,KAAKI,IAAL,CAAUC;AAJd,aAAP;AAMH,SAPM;AADF,KAAT;AAUH,CAbD,CAHJ;;AAmBA;AACAf,OAAOgB,IAAP,CACI,YADJ,EAEI,CACI,gBAAK,gBAAL,EAAuBd,GAAvB,CAA2B,QAA3B,CADJ,EAEI,6BAAM,UAAN,EAAkBe,QAAlB,EAFJ,EAGIC,mBAHJ,CAFJ,EAOI,qBAAW,OAAOf,GAAP,EAAYC,GAAZ,KAAoB;AAC3B,UAAMM,OAAO,MAAMJ,kBAAQa,OAAR,GACdC,KADc,CACR,UADQ,EAEdC,MAFc,CAEPlB,IAAImB,MAAJ,CAAWX,QAFJ,CAAnB;AAGA,QAAI,CAACD,IAAL,EAAW;AACP,cAAMa,MAAM,IAAIC,KAAJ,CAAU,mBAAV,CAAZ;AACAD,YAAIE,MAAJ,GAAa,GAAb;AACA,cAAMF,GAAN;AACH;;AAED,UAAMb,KAAKgB,MAAL,EAAN;;AAEA,UAAMhB,KAAKiB,MAAL,EAAN;;AAEAvB,QAAIwB,GAAJ;AACH,CAfD,CAPJ;;AAyBA;AACA5B,OAAO6B,MAAP,CACI,YADJ,EAEI,CACI,gBAAK,gBAAL,EAAuB3B,GAAvB,CAA2B,QAA3B,CADJ,EAEI,6BAAM,UAAN,EAAkBe,QAAlB,EAFJ,EAGIC,mBAHJ,CAFJ,EAOI,qBAAW,OAAOf,GAAP,EAAYC,GAAZ,KAAoB;AAC3B,UAAMM,OAAO,MAAMJ,kBAAQa,OAAR,GACdC,KADc,CACR,UADQ,EAEdC,MAFc,CAEPlB,IAAImB,MAAJ,CAAWX,QAFJ,CAAnB;AAGA,QAAI,CAACD,IAAL,EAAW;AACP,cAAMa,MAAM,IAAIC,KAAJ,CAAU,mBAAV,CAAZ;AACAD,YAAIE,MAAJ,GAAa,GAAb;AACA,cAAMF,GAAN;AACH;;AAED,UAAMb,KAAKiB,MAAL,EAAN;;AAEAvB,QAAIwB,GAAJ;AACH,CAbD,CAPJ;;kBAuBe5B,M","file":"preuser.route.js","sourcesContent":["import { Router } from 'express'\nimport { asyncRoute, validateParams } from '../../utils/api'\nimport { perm } from '../../utils/role'\nimport { param } from 'express-validator'\nimport PreUser from '../../models/PreUser'\n\nconst router = Router()\n\n// 승인 대기중인 유저 목록 가져오기\nrouter.get(\n    '/',\n    [perm('managePreusers').can('access')],\n    asyncRoute(async (req, res) => {\n        const users = await PreUser.find()\n\n        res.json({\n            users: users.map(user => {\n                return {\n                    username: user.username,\n                    timestamp: user.timestamp,\n                    realname: user.info.realname,\n                    email: user.info.email,\n                }\n            }),\n        })\n    })\n)\n\n// 유저를 정회원으로 승인\nrouter.post(\n    '/:username',\n    [\n        perm('managePreusers').can('access'),\n        param('username').isString(),\n        validateParams,\n    ],\n    asyncRoute(async (req, res) => {\n        const user = await PreUser.findOne()\n            .where('username')\n            .equals(req.params.username)\n        if (!user) {\n            const err = new Error('해당 유저가 존재하지 않습니다.')\n            err.status = 400\n            throw err\n        }\n\n        await user.accept()\n\n        await user.remove()\n\n        res.end()\n    })\n)\n\n// 유저 승인 거절\nrouter.delete(\n    '/:username',\n    [\n        perm('managePreusers').can('access'),\n        param('username').isString(),\n        validateParams,\n    ],\n    asyncRoute(async (req, res) => {\n        const user = await PreUser.findOne()\n            .where('username')\n            .equals(req.params.username)\n        if (!user) {\n            const err = new Error('해당 유저가 존재하지 않습니다.')\n            err.status = 400\n            throw err\n        }\n\n        await user.remove()\n\n        res.end()\n    })\n)\n\nexport default router\n"]}