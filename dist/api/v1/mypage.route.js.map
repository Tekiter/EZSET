{"version":3,"sources":["../../../src/api/v1/mypage.route.js"],"names":["router","route","get","validateParams","req","res","user","User","findOne","where","equals","username","select","json","realname","info","email","post","isString","decoded","auth","checkToken","body","edittoken","error","err","Error","status","password","pwreg","test","message","markModified","save"],"mappings":"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","file":"mypage.route.js","sourcesContent":["import { Router } from 'express'\nimport { body } from 'express-validator'\nimport auth from '../../utils/auth'\nimport { validateParams, asyncRoute } from '../../utils/api'\nimport User from '../../models/User'\n\nconst router = Router()\n\n// 유저 정보 조회하여 회원 정보를 넘겨줌\n/**\n * @api {get} /mypage/ 마이페이지 회원정보 조회\n * @apiName 마이페이지 회원정보 조회\n * @apiGroup Mypage\n *\n * @apiSuccess {Number} 200 마이페이지 회원정보 조회 성공\n * @apiSuccessExample {json} Success-Response:\n *      HTTP/1.1 200\n *          {\n *             username: user.username,\n *             realname: user.info.realname,\n *             email: user.info.email,\n *          }\n */\n//group 목록 보기\nrouter.route('/').get(\n    [validateParams],\n    asyncRoute(async (req, res) => {\n        const user = await User.findOne()\n            .where('username')\n            .equals(req.user.username)\n            .select('username info')\n\n        res.json({\n            username: user.username,\n            realname: user.info.realname,\n            email: user.info.email,\n        })\n    })\n)\n/**\n * @api {post} /mypage/edit 마이페이지 회원정보 수정\n * @apiName 마이페이지 회원정보 수정\n * @apiGroup Mypage\n *\n * @apiParam {String} username 유저 아이디\n * @apiParam {String} password 유저 비밀번호\n * @apiParam {String} realname 유저 실명\n * @apiParam {Email} email 유저 이메일\n * @apiParam {JWT} editToken 회원정보 보안 토큰\n *\n * @apiSuccess {Number} 201 마이페이지 회원정보 수정 성공\n * @apiSuccessExample {json} Success-Response:\n *      HTTP/1.1 201\n *          {\n *              message: 'success',\n *          }\n *\n * @apiError {Number} 400 마이페이지 비밀번호 에러\n * @apiErrorExample {json} Error-Response:\n *       HTTP/1.1 400\n *       {\n *          message:'비밀번호는 8~16자로 영문대 소문자, 숫자, 특수문자를 사용하세요',\n *       }\n *\n * @apiError {Number} 403 마이페이지 비정상적 접근 에러\n * @apiErrorExample Error-Response:\n *       HTTP/1.1 403\n *       {\n *          '토큰이 만료되었습니다.',\n *       }\n * @apiErrorExample {json} Error-Response:\n *       HTTP/1.1 403\n *       {\n *          message: '정상적인 접근이 아닙니다',\n *       }\n *\n */\nrouter.route('/edit').post(\n    [\n        body('username').isString(),\n        body('password').isString(),\n        body('realname').isString(),\n        body('email').isString(),\n        body('edittoken').isString(),\n        validateParams,\n    ],\n    asyncRoute(async (req, res) => {\n        try {\n            let decoded\n            try {\n                decoded = await auth.checkToken(req.body.edittoken)\n            } catch (error) {\n                const err = new Error('토큰이 만료되었습니다.')\n                err.status = 403\n                throw err\n            }\n            if (decoded.username == req.body.username) {\n                if (req.body.password != '') {\n                    let pwreg = /^(?=.*[A-Za-z]+)(?=.*[0-9]+)(?=.*[`~!@#$%^&*()\\-_+=;:\"'?.,<>[\\]{}/\\\\|]*).{8,16}$/\n                    if (!pwreg.test(req.body.password)) {\n                        res.status(400).json({\n                            message:\n                                '비밀번호는 8~16자로 영문대 소문자, 숫자, 특수문자를 사용하세요',\n                        })\n                        return\n                    }\n                }\n\n                const user = await User.findOne()\n                    .where('username')\n                    .equals(req.body.username)\n                if (req.body.realname != '') {\n                    user.info.realname = req.body.realname\n                }\n                if (req.body.email != '') {\n                    user.info.email = req.body.email\n                }\n                if (req.body.password != '') {\n                    user.password = req.body.password\n                }\n                user.markModified('info')\n                await user.save()\n\n                res.status(201).json({ message: 'success' })\n            } else {\n                res.status(403).json({\n                    message: '정상적인 접근이 아닙니다',\n                })\n            }\n        } catch (error) {}\n    })\n)\n\nexport default router\n"]}