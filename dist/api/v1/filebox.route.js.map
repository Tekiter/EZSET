{"version":3,"sources":["../../../src/api/v1/filebox.route.js"],"names":["router","get","req","res","loops","item","Group","find","where","equals","id","sort","children","temp","name","isfolder","push","roots","exists","result","map","root","json","groups","post","isString","isBoolean","isMongoId","optional","can","validateParams","parent","body","parent_id","findById","err","Error","status","newGroup","save","markModified","group","patch","params","group_id","end","message","delete","idx","indexOf","splice","materials","Material","material","files","remove","folder","mat","title","author","content","created_date","custom","checkAttachableFileArray","user","perm","newMaterial","username","Date","now","material_id","folder_id","links","link","target","ref","prevFiles"],"mappings":"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","file":"filebox.route.js","sourcesContent":["import { Router } from 'express'\nimport { validateParams, asyncRoute } from '../../utils/api'\nimport { body, param } from 'express-validator'\nimport Group from '../../models/filebox/Group'\nimport Material from '../../models/filebox/Material'\nimport { perm } from '../../utils/role'\nimport {\n    checkAttachableFileArray,\n    checkIsFileOwner,\n    checkUnlinkedFile,\n    applyFileLink,\n    getFileInfoArray,\n    removeFileLink,\n    deleteUnlinkedFile,\n    getFileLinks,\n} from '../../utils/file'\n\nconst router = Router()\n\n/**\n * @api {get} /filebox/ 자료실 자료 목록\n * @apiName 자료실 자료 목록\n\n * @apiGroup Filebox\n *\n * @apiSuccess {Array} groups 자료실 자료 목록 배열\n * @apiDescription groups는 배열로 id, name, isfolder, children 이 각각 들어있음\n*/\n//group 목록 보기\nrouter.get(\n    '/',\n    [],\n    asyncRoute(async (req, res) => {\n        // 그룹 트리 순회하는 재귀함수\n        const loops = async item => {\n            const res = await Group.find()\n                .where('parent')\n                .equals(item.id)\n                .sort('isfolder')\n\n            if (res) {\n                for (let children of res) {\n                    let temp = {\n                        id: children.id,\n                        name: children.name,\n                        isfolder: children.isfolder,\n                        children: [],\n                    }\n                    item.children.push(temp)\n                    await loops(temp)\n                }\n            }\n            return\n        }\n\n        const roots = await Group.find()\n            .exists('parent', false)\n            .sort('isfolder')\n\n        const result = roots.map(root => {\n            return {\n                id: root.id,\n                name: root.name,\n                isfolder: root.isfolder,\n                children: [],\n            }\n        })\n\n        for (let root of result) {\n            await loops(root)\n        }\n        res.json({\n            groups: result,\n        })\n    })\n)\n\n//group 생성 : group의 부모는 항상  group, 자식은 group(isfolder) 이거나 material\n/**\n * @api {post} /filebox/group 자료실 그룹(폴더) 생성\n * @apiName 자료실 그룹 생성\n * @apiGroup Filebox\n *\n * @apiParam {String} name 그룹(폴더) 이름\n * @apiParam {Boolean} isfolder 그룹, 폴더를 나누는 변수\n * @apiParam {String} parent_id 부모 ID\n *\n * @apiSuccess {Number} 201 자료실 그룹(폴더) 생성 성공\n * @apiSuccessExample {json} Success-Response:\n *      HTTP/1.1 201\n *          {\n *              group: {\n *                  id: newGroup.id,\n *                  name: newGroup.name,\n *          }\n *\n * @apiError {Number} 400 자료실 그룹(폴더) 생성 실패 에러\n * @apiErrorExample Error-Response:\n *       HTTP/1.1 400\n *       {\n *          '올바르지 않은 parent group id 입니다.',\n *       }\n *\n * @apiPermission can.manage\n */\nrouter.post(\n    '/group',\n    [\n        body('name').isString(),\n        body('isfolder').isBoolean(),\n        body('parent_id')\n            .isMongoId()\n            .optional(),\n        perm('fileBox').can('manage'),\n        validateParams,\n    ],\n    asyncRoute(async (req, res) => {\n        let parent\n        //부모 id가 없다면 첫 번째 group\n        if (req.body.parent_id) {\n            parent = await Group.findById(req.body.parent_id)\n            if (!parent || parent.isfolder) {\n                const err = new Error('올바르지 않은 parent group id 입니다.')\n                err.status = 400\n                throw err\n            }\n        }\n        let newGroup = new Group()\n        newGroup.name = req.body.name\n        newGroup.isfolder = req.body.isfolder\n        if (req.body.parent_id) newGroup.parent = req.body.parent_id\n        await newGroup.save()\n        //부모에 새로 만든 그룹의 주소를 자식 배열에 넣어준다\n        if (req.body.parent_id) {\n            parent.children.push(newGroup.id)\n            parent.markModified('children')\n            await parent.save()\n        }\n\n        res.status(201).json({\n            group: {\n                id: newGroup.id,\n                name: newGroup.name,\n            },\n        })\n    })\n)\n\n//group 수정\n/**\n * @api {patch} /filebox/group:group_id 자료실 그룹(폴더) 이름 수정\n * @apiName 자료실 그룹 이름 수정\n * @apiGroup Filebox\n *\n * @apiParam {String} group_id 그룹(폴더) ID\n * @apiParam {String} name 그룹(폴더) 이름\n * @apiParam {Boolean} isfolder 그룹, 폴더를 나누는 변수\n * @apiParam {String} parent_id 부모 ID\n *\n * @apiSuccess {Number} 200 자료실 그룹(폴더) 이름 수정 성공\n *\n * @apiError {Number} 404 지료실 그룹(폴더) 수정 실패 에러\n * @apiErrorExample {json} Error-Response:\n *       HTTP/1.1 404\n *       {\n *          message: 'no group id' + req.params.group_id,\n *       }\n *\n * @apiPermission can.manage\n */\nrouter.patch(\n    '/group/:group_id',\n    [\n        param('group_id').isMongoId(),\n        body('name').isString(),\n        body('isfolder').isBoolean(),\n        body('parent_id')\n            .isMongoId()\n            .optional(),\n        perm('fileBox').can('manage'),\n        validateParams,\n    ],\n    asyncRoute(async function(req, res) {\n        let group = await Group.findById(req.params.group_id)\n        if (group) {\n            group.name = req.body.name\n            await group.save()\n            res.end()\n        } else {\n            res.status(404).json({\n                message: 'no group id' + req.params.group_id,\n            })\n        }\n    })\n)\n\n/**\n * @api {delete} /filebox/group/:group_id 자료실 그룹(폴더) 삭제\n * @apiName 자료실 그룹 삭제\n * @apiGroup Filebox\n *\n * @apiParam {String} group_id 그룹(폴더) ID\n *\n * @apiSuccess {Number} 200 자료실 그룹(폴더) 삭제 성공\n *\n * @apiError {Number} 404 자료실 그룹(폴더) 수정 실패 에러\n * @apiErrorExample Error-Response:\n *       HTTP/1.1 404\n *       {\n *          '해당 그룹 또는 폴더가 존재하지 않습니다.'\n *       }\n *\n * @apiPermission can.manage\n */\nrouter.delete(\n    '/group/:group_id',\n    [\n        perm('fileBox').can('manage'),\n        param('group_id').isMongoId(),\n        validateParams,\n    ],\n    asyncRoute(async (req, res) => {\n        // 트리 재귀적 삭제 루프\n        const loops = async group_id => {\n            const group = await Group.findById(group_id)\n            if (!group) {\n                const err = new Error(\n                    '해당 그룹 또는 폴더가 존재하지 않습니다.'\n                )\n                err.status = 404\n                throw err\n            }\n\n            if (group.parent) {\n                const parent = await Group.findById(group.parent)\n                if (parent) {\n                    const idx = parent.children.indexOf(group_id)\n                    if (idx >= 0) {\n                        parent.children.splice(idx, 1)\n                    }\n                    await parent.save()\n                }\n            }\n\n            if (group.isfolder) {\n                const materials = await Material.find()\n                    .where('parent')\n                    .equals(group_id)\n\n                for (let material of materials) {\n                    await removeFileLink(material.files)\n                    await deleteUnlinkedFile(material.files)\n                    await material.remove()\n                }\n                await group.remove()\n            } else {\n                for (let children of group.children) {\n                    await loops(children)\n                }\n                await group.remove()\n            }\n        }\n\n        await loops(req.params.group_id)\n\n        res.end()\n    })\n)\n\n//folder 조회\n/**\n * @api {get} /filebox/folder/:parent_id 자료실 폴더 조회\n * @apiName 자료실 폴더 조회\n * @apiGroup Filebox\n *\n * @apiParam {String} parent_id 부모 폴더 ID\n *\n * @apiSuccess {Number} 200 자료실 폴더 조회 성공\n * @apiSuccessExample {json} Success-Response:\n *      HTTP/1.1 200\n *          {\n *              folder: {\n *                  name: folder.name,\n *              },\n *              materials: mat,\n *          }\n *\n * @apiError {Number} 404 자료실 게시물 폴더 조회 실패 에러\n * @apiErrorExample Error-Response:\n *       HTTP/1.1 404\n *       {\n *          '존재하지 않는 group id 입니다.',\n *       }\n */\nrouter.get(\n    '/folder/:parent_id',\n    [param('parent_id').isMongoId(), validateParams],\n    asyncRoute(async (req, res) => {\n        const folder = await Group.findById(req.params.parent_id)\n        if (!folder) {\n            const err = new Error('존재하지 않는 group id 입니다.')\n            err.status = 404\n            throw err\n        }\n\n        const materials = await Material.find()\n            .where('parent')\n            .equals(req.params.parent_id)\n            .sort('-_id')\n\n        const mat = []\n\n        for (let item of materials) {\n            mat.push({\n                id: item.id,\n                title: item.title,\n                author: item.author,\n                content: item.content,\n                created_date: item.created_date,\n                files: await getFileInfoArray(item.files),\n            })\n        }\n        res.json({\n            folder: {\n                name: folder.name,\n            },\n            materials: mat,\n        })\n    })\n)\n\n//material 생성 : material의 부모는 항상 isfolder\n/**\n * @api {post} /filebox/folder/:parent_id 자료실 게시물 생성\n * @apiName 자료실 게시물 생성\n * @apiGroup Filebox\n *\n * @apiParam {String} title 게시물 이름\n * @apiParam {String} content 게시물 내용\n * @apiParam {Array} files 업로드된 파일 ID 들의 배열\n * @apiParam {String} parent_id  부모 폴더의 ID\n *\n * @apiSuccess {Number} 201 자료실 게시물 생성 성공\n * @apiSuccessExample {json} Success-Response:\n *      HTTP/1.1 201\n *          {\n *              material: {\n *              id: newMaterial.id,\n *              name: newMaterial.title,\n *          }\n *\n * @apiError {Number} 400 자료실 게시물 생성 실패 에러\n * @apiErrorExample Error-Response:\n *       HTTP/1.1 400\n *       {\n *          '올바르지 않은 parent id 입니다.',\n *       }\n * @apiErrorExample Error-Response:\n *       HTTP/1.1 400\n *       {\n *          '올바르지 않은 첨부파일입니다.',\n *       }\n *\n * @apiError {Number} 403 자료실 게시물 생성 권한 에러\n * @apiErrorExample Error-Response:\n *       HTTP/1.1 403\n *       {\n *          '권한이 없습니다.',\n *       }\n *\n *\n * @apiPermission can.manage\n * @apiPermission can.upload\n */\nrouter.post(\n    '/folder/:parent_id',\n    [\n        body('title').isString(),\n        body('content').isString(),\n        body('files').custom(checkAttachableFileArray),\n        param('parent_id').isMongoId(),\n        validateParams,\n    ],\n    asyncRoute(async (req, res) => {\n        if (\n            !req.user.perm('fileBox').can('upload') &&\n            !req.user.perm('fileBox').can('manage')\n        ) {\n            const err = new Error('권한이 없습니다.')\n            err.status = 403\n            throw err\n        }\n\n        const parent = await Group.findById(req.params.parent_id)\n        if (!parent) {\n            const err = new Error('올바르지 않은 parent id 입니다.')\n            err.status = 400\n            throw err\n        }\n        if (\n            !checkIsFileOwner(req.body.files) ||\n            !checkUnlinkedFile(req.body.files)\n        ) {\n            const err = new Error('올바르지 않은 첨부파일입니다.')\n            err.status = 400\n            throw err\n        }\n\n        const newMaterial = new Material({\n            title: req.body.title,\n            author: req.user.username,\n            content: req.body.content,\n            created_date: Date.now(),\n            files: req.body.files,\n            parent: req.params.parent_id,\n        })\n        await newMaterial.save()\n\n        // DB 파일 객체에 역참조 등록\n        await applyFileLink(req.body.files, 'filebox', newMaterial.id)\n        newMaterial.files = req.body.files\n\n        await newMaterial.save()\n\n        res.status(201).json({\n            material: {\n                id: newMaterial.id,\n                name: newMaterial.title,\n            },\n        })\n    })\n)\n\n/**\n * @api {get} /filebox/material/:material_id 자료실 게시물 조회\n * @apiName 자료실 게시물 조회\n * @apiGroup Filebox\n *\n * @apiParam {String} material_id 게시물 ID\n *\n * @apiSuccess {Number} 200 자료실 게시물 조회 성공\n * @apiSuccessExample {json} Success-Response:\n *      HTTP/1.1 200\n *          {\n *              id: material.id,\n *              folder_id: material.parent,\n *              title: material.title,\n *              author: material.author,\n *              content: material.content,\n *              created_date: material.created_date,\n *              files: await getFileInfoArray(material.files),\n *          }\n *\n * @apiError {Number} 404 자료실 게시물 조회 실패 에러\n * @apiErrorExample Error-Response:\n *       HTTP/1.1 404\n *       {\n *          '존재하지 않는 자료입니다.',\n *       }\n */\nrouter.get(\n    '/material/:material_id',\n    [param('material_id').isMongoId(), validateParams],\n    asyncRoute(async (req, res) => {\n        const material = await Material.findById(req.params.material_id)\n\n        if (!material) {\n            const err = new Error('존재하지 않는 자료입니다.')\n            err.status = 404\n            throw err\n        }\n\n        res.status(200).json({\n            id: material.id,\n            folder_id: material.parent,\n            title: material.title,\n            author: material.author,\n            content: material.content,\n            created_date: material.created_date,\n            files: await getFileInfoArray(material.files),\n        })\n    })\n)\n\n// material 삭제\n/**\n * @api {delete} /filebox/material/:material_id 자료실 게시물 삭제\n * @apiName 자료실 게시물 삭제\n * @apiGroup Filebox\n *\n * @apiParam {String} material_id 게시물 ID\n *\n * @apiSuccess {Number} 200 자료실 게시물 삭제 성공\n * @apiSuccessExample {json} Success-Response:\n *      HTTP/1.1 200\n *          {\n *              message: '자료가 삭제되었습니다.'\n *          }\n *\n * @apiError {Number} 403 자료실 게시물 삭제 권한 에러\n * @apiErrorExample Error-Response:\n *       HTTP/1.1 403\n *       {\n *          '권한이 없습니다.',\n *       }\n * @apiErrorExample Error-Response:\n *       HTTP/1.1 403\n *       {\n *          '본인이 아닌경우 파일을 지울 수 없습니다.',\n *       }\n *\n * @apiError {Number} 404 자료실 게시물 삭제 실패 에러\n * @apiErrorExample Error-Response:\n *       HTTP/1.1 404\n *       {\n *          '존재하지 않는 자료입니다.',\n *       }\n *\n * @apiPermission can.manage\n * @apiPermission can.upload\n */\nrouter.delete(\n    '/material/:material_id',\n    [param('material_id').isMongoId(), validateParams],\n    asyncRoute(async (req, res) => {\n        const material = await Material.findById(req.params.material_id)\n        if (!req.user.perm('fileBox').can('manage')) {\n            //파일을 올린 본인이 아니라면 삭제할 수 없도록함\n            if (\n                req.user.perm('fileBox').can('upload') &&\n                material.author != req.user.username\n            ) {\n                const err = new Error(\n                    '본인이 아닌경우 파일을 지울 수 없습니다.'\n                )\n                err.status = 403\n                throw err\n            }\n        }\n\n        if (!material) {\n            const err = new Error('존재하지 않는 자료입니다.')\n            err.status = 404\n            throw err\n        }\n\n        await removeFileLink(material.files)\n        await deleteUnlinkedFile(material.files)\n\n        await material.delete()\n\n        res.status(200).json({ message: '자료가 삭제되었습니다.' })\n    })\n)\n\n// material 수정\n/**\n * @api {patch} /filebox/material/:material_id 자료실 게시물 수정\n * @apiName 자료실 게시물 수정\n * @apiGroup Filebox\n *\n * @apiParam {String} material_id 게시물 ID\n * @apiParam {String} title 게시물 이름\n * @apiParam {String} content 게시물 내용\n * @apiParam {Array} files 업로드된 파일 ID 들의 배열\n *\n * @apiSuccess {Number} 200 자료실 게시물 수정 성공\n * @apiSuccessExample {json} Success-Response:\n *      HTTP/1.1 200\n *          {\n *              message: '자료가 수정되었습니다.'\n *          }\n *\n * @apiError {Number} 400 자료실 게시물 첨부파일 수정 에러\n * @apiErrorExample Error-Response:\n *       HTTP/1.1 400\n *       {\n *          '올바르지 않은 첨부파일입니다.',\n *       }\n *\n * @apiError {Number} 403 자료실 게시물 수정 권한 에러\n * @apiErrorExample Error-Response:\n *       HTTP/1.1 403\n *       {\n *          '권한이 없습니다.',\n *       }\n * @apiErrorExample Error-Response:\n *       HTTP/1.1 403\n *       {\n *          '본인이 아닌경우 파일을 지울 수 없습니다.',\n *       }\n *\n * @apiError {Number} 404 자료실 게시물 수정 실패 에러\n * @apiErrorExample Error-Response:\n *       HTTP/1.1 404\n *       {\n *          '존재하지 않는 자료입니다.',\n *       }\n *\n * @apiPermission can.manage\n * @apiPermission can.upload\n */\nrouter.patch(\n    '/material/:material_id',\n    [\n        param('material_id').isMongoId(),\n        body('title').isString(),\n        body('content').isString(),\n        body('files').custom(checkAttachableFileArray),\n        validateParams,\n    ],\n    asyncRoute(async (req, res) => {\n        const material = await Material.findById(req.params.material_id)\n\n        if (!req.user.perm('fileBox').can('manage')) {\n            //파일을 올린 본인이 아니라면 수정할 수 없도록함\n            if (\n                req.user.perm('fileBox').can('upload') &&\n                material.author != req.user.username\n            ) {\n                const err = new Error(\n                    '본인이 아닌경우 파일을 수정할 수 없습니다.'\n                )\n                err.status = 403\n                throw err\n            }\n        }\n\n        if (!material) {\n            const err = new Error('존재하지 않는 자료입니다.')\n            err.status = 404\n            throw err\n        }\n        if (!checkIsFileOwner(req.body.files)) {\n            const err = new Error('올바르지 않은 첨부파일입니다.')\n            err.status = 400\n            throw err\n        }\n\n        // 이미 첨부된 파일을 첨부하는지 검사\n        const links = await getFileLinks(req.body.files)\n        for (let link of links) {\n            if (link.target !== 'filebox' || link.ref !== material.id) {\n                const err = new Error('올바르지 않은 첨부파일입니다.')\n                err.status = 400\n                throw err\n            }\n        }\n\n        material.title = req.body.title\n        material.content = req.body.content\n\n        const newMaterial = await material.save()\n        const prevFiles = newMaterial.files\n\n        await removeFileLink(prevFiles)\n\n        // DB 파일 객체에 역참조 등록\n        await applyFileLink(req.body.files, 'filebox', newMaterial.id)\n        newMaterial.files = req.body.files\n\n        await newMaterial.save()\n\n        await deleteUnlinkedFile(prevFiles)\n\n        res.status(200).json({ message: '자료가 수정되었습니다.' })\n    })\n)\nexport default router\n"]}