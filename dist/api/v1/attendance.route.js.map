{"version":3,"sources":["../../../src/api/v1/attendance.route.js"],"names":["router","moment","require","ranNum","startUser","post","can","req","res","body","code","json","message","result","Date","format","Name","user","username","AttendanceDay","findOneAndUpdate","day","err","doc","AttendanceUser","name","get","cursor","find","status","$elemMatch","state","end","userList","User","attable","select","attendanceDay","cnt","where","equals","count","k","cursor_Day","findOne","addStatus","cursor_User","attendanceUser","isString","validateParams","cur","params","_id","__v","Day","attendnaceDayList","attendnaceUser","canOwn","Users","forEach","element","filter","e","length","push","users","sort","excludedUsers","ne","attableUsers","map","realname","info","put","isArray","error","Error","save","delete","custom","checkUsername"],"mappings":"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","file":"attendance.route.js","sourcesContent":["import Router from 'express'\nimport { asyncRoute, validateParams, checkUsername } from '../../utils/api'\nimport random from 'random-number-csprng'\nimport User from '../../models/User'\nimport AttendanceDay from '../../models/attendanceDay'\nimport AttendanceUser from '../../models/attendanceUser'\nimport { perm } from '../../utils/role'\nimport { param, body } from 'express-validator'\nconst router = Router()\nvar moment = require('moment')\nvar ranNum = random(100, 999)\nvar startUser = ''\n\n/**\n * @api {post} /attendance/attendanceWrite/ 출석 요청\n * @apiDescription 사용자가 자신이 입력한 코드로 출석요청을 보냄. 서버에서 생성한 출석코드와 일치한다면 출석 처리\n * @apiName attendanceWrite\n * @apiGroup AttendanceCheck\n * @apiPermission attendance.can.att\n *\n * @apiParam {Number} code 사용자가 입력한 출석번호\n * @apiParamExample {post} Request-Example:\n *      {\n *          \"code\":129\n *      }\n * @apiSuccess {Number} 1 서버가 생성한 번호와 사용자가 입력한 번호가 일치함.\n *\n * @apiSuccessExample {json} Success-Response:\n *      HTTP/1.1 200 OK\n *      {\n *           \"result\":1\n *      }\n * @apiSuccess {Number} 0 서버가 생성한 번호와 사용자가 입력한 번호가 일치하지 않음.\n * @apiSuccessExample {json} Success-Response:\n *       HTTP/1.1 200 OK\n *      {\n *          \"result\":0\n *      }\n */\nrouter.post(\n    '/attendanceWrite',\n    [perm('attendance').can('att')],\n    asyncRoute(async function(req, res) {\n        if (ranNum != req.body.code) {\n            res.json({\n                message: 'wrongCode!',\n                result: 0,\n            })\n        }\n        var Date = moment().format('YYYYMMDD')\n        var Name = req.user.username\n\n        await AttendanceDay.findOneAndUpdate(\n            {\n                day: Date,\n                'status.name': Name,\n            },\n            { 'status.$.state': 'attendance' },\n            function(err, doc) {}\n        )\n\n        await AttendanceUser.findOneAndUpdate(\n            {\n                name: Name,\n                'status.date': Date,\n            },\n            { 'status.$.state': 'attendance' },\n            function(err, doc) {}\n        )\n        res.json({ result: 1 })\n    })\n)\n\n/**\n * @api {get} /attendance/attendanceCheck/ 출석유무 체크\n * @apiDescription 현재 날짜에 사용자의 출석 상태가 `attendance`상태인지 체크\n * @apiName attendanceCheck\n * @apiGroup AttendanceCheck\n * @apiPermission attendance.can.att\n *\n * @apiSuccess {Number} 1 당일 사용자의 출석상태가 `출석` 상태임.\n *\n * @apiSuccessExample {json} Success-Response:\n *      HTTP/1.1 200 OK\n *      {\n *           1\n *      }\n * @apiSuccess {Number} 0 당일 사용자의 출석상태가 `출석` 상태가 아님.\n * @apiSuccessExample {json} Success-Response:\n *       HTTP/1.1 200 OK\n *      {\n *          0\n *      }\n */\nrouter.get(\n    '/attendanceCheck',\n    [perm('attendance').can('att')],\n    asyncRoute(async function(req, res) {\n        var Date = moment().format('YYYYMMDD')\n        var Name = req.user.username\n        try {\n            const cursor = await AttendanceDay.find({\n                day: Date,\n                status: { $elemMatch: { name: Name, state: 'attendance' } },\n            })\n            if (cursor != '') {\n                res.json(1)\n            } else {\n                res.json(0)\n            }\n        } catch (err) {\n            res.status(501).json(err)\n        }\n    })\n)\n\n/**\n * @api {get} /attendance/attendanceCheckAdmin/ 서버 출석 코드 전송\n * @apiName attendanceCheckAdmin\n * @apiDescription 출석을 시작한 관리자가 출석 진행중에 페이지를 새로고침 했을 때 서버에서 생성한 출석 코드를 전송\n * @apiGroup AttendanceCheck\n * @apiPermission attendance.can.att\n *\n * @apiSuccess {Number} ranNum 출석을 시작한 관리자의 요청일 경우\n *\n * @apiSuccessExample {json} Success-Response:\n *      HTTP/1.1 200 OK\n *      {\n *           129\n *      }\n * @apiSuccess {Number} 0 출석을 시작한 관리자의 요청이 아닐 경우\n * @apiSuccessExample {json} Success-Response:\n *       HTTP/1.1 200 OK\n *      {\n *          0\n *      }\n */\n\nrouter.get(\n    '/attendanceCheckAdmin',\n    [perm('attendance').can('att')],\n    asyncRoute(async function(req, res) {\n        if (startUser == req.user.username) res.json(ranNum)\n        else res.json(0)\n    })\n)\n\n/**\n * @api {post} /attendance/attendanceCheckEnd/ 출석 종료\n * @apiName attendanceCheckEnd\n * @apiDescription 출석 종료시 서버에서 생성했던 출석 코드(ranNum)와 출석시작했던 관리자 아이디(startUser) 값을 초기화\n * @apiGroup AttendanceCheck\n * @apiPermission attendance.can.att\n *\n * @apiSuccess {Number} 200 정상 처리되었을 경우\n *\n * @apiSuccessExample {json} Success-Response:\n *      HTTP/1.1 200 OK\n *\n */\nrouter.post(\n    '/attendanceCheckEnd',\n    [perm('attendance').can('att')],\n    asyncRoute(async function(req, res) {\n        startUser = ''\n        ranNum = -1\n        res.end()\n    })\n)\n\n/**\n * @api {post} /attendance/startAttendance/ 출석 시작\n * @apiName startAttendance\n * @apiDescription 출석시작버튼을 눌렀을경우 관리자는 출석상태로 다른 모든 유저는 결석상태로 업데이트함\n * @apiGroup AttendanceCheck\n * @apiPermission attendance.can.update\n *\n * @apiSuccess {Number} ranNum 서버에서 생성한 3자리 출석코드 반환\n *\n * @apiSuccessExample {json} Success-Response:\n *      HTTP/1.1 200 OK\n *      {\n *          \"code\": ranNum\n *      }\n *\n */\nrouter.post(\n    '/startAttendance',\n    [perm('attendance').can('update')],\n    asyncRoute(async function(req, res) {\n        var Date = moment().format('YYYYMMDD')\n        //get Userlist in User collection\n        const userList = await User.find({\n            attable: true,\n        }).select('username')\n        //create db - AttendanceDay\n        var attendanceDay = new AttendanceDay()\n        attendanceDay.day = Date\n\n        const cnt = await AttendanceDay.find()\n            .where('day')\n            .equals(Date)\n            .count()\n\n        if (cnt == 0) {\n            for (var k in userList) {\n                var cursor_Day = await AttendanceDay.findOne()\n                    .where('day')\n                    .equals(Date)\n                var state = 'absence'\n                if (req.user.username == userList[k].username)\n                    state = 'attendance'\n                if (!cursor_Day) {\n                    var attendanceDay = new AttendanceDay()\n                    attendanceDay.day = Date\n                    attendanceDay.addStatus(userList[k].username, state)\n                } else {\n                    cursor_Day.addStatus(userList[k].username, state)\n                }\n                //create db - AttendanceUser\n                var cursor_User = await AttendanceUser.findOne()\n                    .where('name')\n                    .equals(userList[k].username)\n                state = 'absence'\n                if (req.user.username == userList[k].username)\n                    state = 'attendance'\n                if (!cursor_User) {\n                    var attendanceUser = new AttendanceUser()\n                    attendanceUser.name = userList[k].username\n                    attendanceUser.addStatus(Date, state)\n                } else {\n                    cursor_User.addStatus(Date, state)\n                }\n            }\n        }\n        //Generate Attendance Code and return\n        try {\n            ranNum = await random(100, 999)\n            startUser = req.user.username\n            res.json({ code: ranNum })\n        } catch (err) {\n            res.status(501).json()\n        }\n    })\n)\n\n/**\n * @api {get} /attendanceState/:day 일별 출석현황 반환\n * @apiDescription 특정 일자의 출석현황을 반환\n * @apiName attendanceState\n * @apiGroup AttendanceCheck\n * @apiPermission attendance.can.update\n *\n * @apiParam {String} day 반환하고 싶은 날짜, YYYYMMDD 형태\n * @apiParamExample {get} Request-Example:\n *      {\n *         \"day\":\"20200304\"\n *      }\n * @apiSuccess {Object} status 해당 일자의 출결 정보 객체\n *\n * @apiSuccessExample {json} Success-Response:\n *      HTTP/1.1 200 OK\n *           {\n *               \"status\": [\n *                           {\n *                           \"_id\": \"5e5f4886c785712d2c55b022\",\n *                            \"name\": \"admin\",\n *                            \"state\": \"attendance\"\n *                          },\n *                           {\n *                            \"_id\": \"5e5f4886c785712d2c55b026\",\n *                            \"name\": \"user0001\",\n *                            \"state\": \"attendance\"\n *                          },\n *                          {\n *                            \"_id\": \"5e5f4886c785712d2c55b02a\",\n *                            \"name\": \"user0002\",\n *                            \"state\": \"attendance\"\n *                          },\n *                        ]\n *            }\n * @apiError {Number} 404 해당 일자에 출결정보 없음\n * @apiErrorExample {json} Error-Response:\n *       HTTP/1.1 404 Not Found\n */\nrouter.get(\n    '/attendanceState/:day',\n    [param('day').isString(), perm('attendance').can('update'), validateParams],\n    asyncRoute(async function(req, res) {\n        const cur = await AttendanceDay.findOne({\n            day: req.params.day,\n        }).select({ _id: 0, __v: 0, day: 0 })\n        if (cur != null) res.json(cur)\n        else res.status(404).json()\n    })\n)\n\n/**\n * @api {post} /attendancestateupdate/:day 출석 상태 업데이트\n * @apiDescription <code>day</code>날짜에 <code>name</code>이라는 아이디를 가진 사용자의 출석 상태를 <code>state</code>로 업데이트\n * @apiName attendancestateupdate\n * @apiGroup AttendanceCheck\n * @apiPermission attendance.can.update\n *\n * @apiParam {String} day 업데이트할 날짜, YYYYMMDD 형태\n * @apiParam {String} state 업데이트할 상태 (<code>attendance</code>,<code>absence</code>,<code>late</code>,<code>offical_absence</code>)중 하나\n * @apiParam {String} name 업데이트할 사용자 아이디\n * @apiParamExample {json} Request-Example:\n *      {\n *          \"day\":\"20200304\",\n *          \"state\":\"late\",\n *          \"name\":\"hschoi1104\"\n *      }\n * @apiSuccess {Object} object 바꾼 상태의 객체 반환\n *\n * @apiSuccessExample {json} Success-Response:\n *      HTTP/1.1 200 OK\n */\nrouter.post(\n    '/attendancestateupdate/:day',\n    [\n        perm('attendance').can('update'),\n        param('day').isString(),\n        body('state').isString(),\n        body('name').isString(),\n        validateParams,\n    ],\n    asyncRoute(async function(req, res) {\n        var Day = req.params.day\n\n        await AttendanceDay.findOneAndUpdate(\n            {\n                day: Day,\n                'status.name': req.body.name,\n            },\n            { 'status.$.state': req.body.state },\n            function(err, doc) {}\n        )\n\n        await AttendanceUser.findOneAndUpdate(\n            {\n                name: req.body.name,\n                'status.date': Day,\n            },\n            { 'status.$.state': req.body.state },\n            function(err, doc) {}\n        )\n        res.end()\n    })\n)\n\n/**\n * @api {get} /attendance/attendanceUserList/ 사용자 리스트 반환\n * @apiDescription 전체 사용자 리스트를 반환\n * @apiName attendanceUserList\n * @apiGroup AttendanceCheck\n * @apiPermission attendance.can.update\n *\n * @apiSuccess {Array} data 전체 사용자정보 객체 배열\n *\n * @apiSuccessExample {json} Success-Response:\n *      HTTP/1.1 200 OK\n *          {\n *              [\n *                    {\n *                       \"_id\": \"5e1ff2fc39c8d12194bd55f4\",\n *                       \"username\": \"admin\"\n *                   },\n *                   {\n *                      \"_id\": \"5e1ff395b7ee260ffc203de2\",\n *                      \"username\": \"user0001\"\n *                   },\n *                   {\n *                      \"_id\": \"5e1ff3b3b7ee260ffc203de3\",\n *                      \"username\": \"user0002\"\n *                   },\n *               ]\n *          }\n */\nrouter.get(\n    '/attendanceUserList',\n    [perm('attendance').can('update')],\n    asyncRoute(async function(req, res) {\n        const userList = await User.find().select('username')\n        res.json(userList)\n    })\n)\n\n/**\n * @api {get} /attendance/attendanceDayList/ 전체 일별 출결현황 반환\n * @apiDescription 전체 일별 출결현황 반환\n * @apiName attendanceDayList\n * @apiGroup AttendanceCheck\n * @apiPermission attendance.can.read\n *\n * @apiSuccess {Array} data 전체 일별 출결현황 객체 배열\n *\n * @apiSuccessExample {json} Success-Response:\n * HTTP/1.1 200 OK\n * {\n *  [\n *  {\n *    \"_id\": \"5e1ff40db7ee260ffc203de5\",\n *    \"status\": [\n *      {\n *        \"_id\": \"5e1ff40db7ee260ffc203de6\",\n *        \"name\": \"admin\",\n *        \"state\": \"late\"\n *      },\n *      {\n *        \"_id\": \"5e1ff40db7ee260ffc203deb\",\n *        \"name\": \"user0001\",\n *        \"state\": \"attendance\"\n *      },\n *      {\n *        \"_id\": \"5e1ff40db7ee260ffc203df0\",\n *        \"name\": \"user0002\",\n *        \"state\": \"attendance\"\n *      }\n *    ],\n *    \"day\": \"20200115\",\n *    \"__v\": 2\n *  },\n *  {\n *    \"_id\": \"5e1ff480b7ee260ffc203df6\",\n *    \"status\": [\n *      {\n *        \"_id\": \"5e1ff480b7ee260ffc203df7\",\n *        \"name\": \"admin\",\n *        \"state\": \"attendance\"\n *      },\n *      {\n *        \"_id\": \"5e1ff480b7ee260ffc203dfb\",\n *        \"name\": \"user0001\",\n *        \"state\": \"official_absence\"\n *      },\n *      {\n *        \"_id\": \"5e1ff480b7ee260ffc203dff\",\n *        \"name\": \"user0002\",\n *        \"state\": \"attendance\"\n *      },\n *      {\n *        \"_id\": \"5e3bec45e9ce0e0968a5e781\",\n *        \"name\": \"user0004\",\n *        \"state\": \"absence\"\n *      }\n *    ],\n *    \"day\": \"20200116\",\n *    \"__v\": 3\n *  },\n * ]\n *}\n */\nrouter.get(\n    '/attendanceDayList',\n    [perm('attendance').can('update')],\n    asyncRoute(async function(req, res) {\n        const attendnaceDayList = await AttendanceDay.find()\n        res.json(attendnaceDayList)\n    })\n)\n\n/**\n * @api {get} /attendance/attendanceUserListData/ 사용자별 출결현황 반환\n * @apiDescription 사용자별 출결현황 반환\n * @apiName attendanceUserListData\n * @apiGroup AttendanceCheck\n * @apiPermission attendance.can.read\n *\n * @apiSuccess {Object} data 전체 사용자별 출결현황 객체 배열\n *\n * @apiSuccessExample {json} Success-Response:\n * HTTP/1.1 200 OK\n * [\n *  {\n *    \"_id\": \"5e1ff40db7ee260ffc203de8\",\n *    \"status\": [\n *      {\n *        \"_id\": \"5e1ff40db7ee260ffc203de9\",\n *        \"date\": \"20200115\",\n *        \"state\": \"late\"\n *      },\n *      {\n *        \"_id\": \"5e1ff480b7ee260ffc203df9\",\n *        \"date\": \"20200116\",\n *        \"state\": \"attendance\"\n *      },\n *    ],\n *    \"name\": \"admin\",\n *    \"__v\": 27\n *  },\n *  {\n *    \"_id\": \"5e1ff40db7ee260ffc203ded\",\n *    \"status\": [\n *      {\n *        \"_id\": \"5e1ff40db7ee260ffc203dee\",\n *        \"date\": \"20200115\",\n *        \"state\": \"attendance\"\n *      },\n *      {\n *        \"_id\": \"5e1ff480b7ee260ffc203dfd\",\n *        \"date\": \"20200116\",\n *        \"state\": \"official_absence\"\n *      },\n *    ],\n *    \"name\": \"user0001\",\n *    \"__v\": 27\n *  },\n *]\n */\nrouter.get(\n    '/attendanceUserListData',\n    [perm('attendance').can('update')],\n    asyncRoute(async function(req, res) {\n        const attendnaceUser = await AttendanceUser.find()\n        res.json(attendnaceUser)\n    })\n)\n\n/**\n * @api {get} /attendance/attendanceUserData/ 사용자 출결현황 반환\n * @apiDescription 자신의 출결현황 반환한다.\n * @apiName attendanceUserData\n * @apiGroup AttendanceCheck\n * @apiPermission attendance.canOwn.read\n *\n * @apiSuccess {Object} data 자신의 출결현황 객체 반환\n *\n * @apiSuccessExample {json} Success-Response:\n * HTTP/1.1 200 OK\n * {\n *  [\n *   {\n *     \"_id\": \"5e1ff40db7ee260ffc203de8\",\n *     \"status\": [\n *       {\n *         \"_id\": \"5e5bc7f2cb0dba2d48491bff\",\n *         \"date\": \"20200301\",\n *         \"state\": \"attendance\"\n *       },\n *       {\n *         \"_id\": \"5e5bece73d513a0d78ba7eb3\",\n *         \"date\": \"20200302\",\n *         \"state\": \"official_absence\"\n *       },\n *       {\n *         \"_id\": \"5e5f4886c785712d2c55b024\",\n *         \"date\": \"20200304\",\n *         \"state\": \"attendance\"\n *         }\n *       ],\n *     \"name\": \"admin\",\n *     \"__v\": 27\n *   }\n *  ]\n * }\n */\nrouter.get(\n    '/attendanceUserData',\n    [perm('attendance').canOwn('read')],\n    asyncRoute(async function(req, res) {\n        const attendnaceUser = await AttendanceUser.find()\n            .where('name')\n            .equals(req.user.username)\n        res.json(attendnaceUser)\n    })\n)\n\n/**\n * @api {post} /attendance/attendanceNUserData\n * @apiDescription <code>day</code> 날짜에 출석 정보가 없는 사용자 리스트 반환\n * @apiName attendanceNUserData\n * @apiGroup AttendanceCheck\n * @apiPermission attendance.can.update\n *\n * @apiParam {String} day 업데이트할 날짜, YYYYMMDD 형태\n *\n * @apiParamExample {json} Request-Example:\n *      {\n *          \"day\":\"20200304\"\n *      }\n * @apiSuccess {Array} Array 해당 날짜에 출석 정보가 없는 사용자 리스트\n *\n * @apiSuccessExample {json} Success-Response:\n *      HTTP/1.1 200 OK\n * {\n *  [\n *  \"user0005\",\n *  \"user0006\",\n *  \"user0007\",\n *  \"test01\",\n *  \"test02\"\n *  ]\n * }\n *\n * @apiError {Number} 404 해당 날짜에 출결정보가 없을 경우\n * @apiErrorExample {json} Error-Response:\n *       HTTP/1.1 404 Not Found\n */\nrouter.post(\n    '/attendanceNUserData',\n    [perm('attendance').can('update'), body('day').isString(), validateParams],\n    asyncRoute(async function(req, res) {\n        const result = []\n        const Users = await User.find().select('username')\n        const attendanceDay = await AttendanceDay.findOne()\n            .where('day')\n            .equals(req.body.day)\n            .select({ _id: 0, __v: 0, day: 0 })\n        if (attendanceDay != null) {\n            Users.forEach(element => {\n                if (\n                    attendanceDay.status.filter(function(e) {\n                        return e.name === element.username\n                    }).length == 0\n                )\n                    result.push(element.username)\n            })\n            res.json(result)\n        } else res.status(404).json()\n    })\n)\n\n/**\n * @api {get} /attendance/manage/user 출석 대상 조회\n * @apiDescription 출석 대상 사용자 리스트와 출석 대상이 아닌 사용자 리스트 반환\n * @apiName read user\n * @apiGroup AttendanceCheck/manage\n * @apiPermission attendance.can.update\n *\n * @apiSuccess {Array} attableUsers 출석 대상 사용자 리스트\n * @apiSuccess {Array} excludedUsers 출석 대상이 아닌 사용자 리스트\n *\n * @apiSuccessExample {json} Success-Response:\n *      HTTP/1.1 200 OK\n * {\n *  \"attableUsers\": [\n *    {\n *      \"username\": \"admin\",\n *      \"realname\": \"관리자\"\n *    },\n *    {\n *      \"username\": \"test01\",\n *      \"realname\": \"test01\"\n *    },\n *    {\n *      \"username\": \"test02\",\n *      \"realname\": \"test02\"\n *    },\n *    {\n *      \"username\": \"user0001\",\n *      \"realname\": \"최현석\"\n *    },\n *  ],\n *  \"excludedUsers\": []\n *}\n */\nrouter.get(\n    '/manage/user',\n    [perm('attendance').can('update'), validateParams],\n    asyncRoute(async function(req, res) {\n        const users = await User.find()\n            .where('attable')\n            .equals(true)\n            .sort('username')\n            .select('username info')\n\n        const excludedUsers = await User.find()\n            .where('attable')\n            .ne(true)\n            .sort('username')\n            .select('username info')\n\n        res.json({\n            attableUsers: users.map(user => {\n                return {\n                    username: user.username,\n                    realname: user.info.realname,\n                }\n            }),\n            excludedUsers: excludedUsers.map(user => {\n                return {\n                    username: user.username,\n                    realname: user.info.realname,\n                }\n            }),\n        })\n    })\n)\n\n/**\n * @api {put} /attendance/manage/user 출석 대상 추가\n * @apiDescription 출석대상 사용자 추가\n * @apiName write user\n * @apiGroup AttendanceCheck/manage\n * @apiPermission attendance.can.update\n *\n * @apiParam {Array} users 출석 대상으로 추가할 사용자정보가 담긴 배열\n *\n * @apiParamExample {json} Request-Example:\n *      {\n *        [\n *          \"user0001\",\n *          \"user0002\",\n *          \"user0003\"\n *        ]\n *      }\n *\n * @apiSuccess {Number} 200 성공\n *\n * @apiSuccessExample {json} Success-Response:\n *      HTTP/1.1 200 OK\n *\n *\n * @apiError {Number} 404 올바르지 않은 사용자가 있을 경우\n *\n * @apiErrorExample {json} Error-Response:\n *       HTTP/1.1 404 Not Found\n * {\n *      존재하지 않는 유저입니다.\n * }\n */\nrouter.put(\n    '/manage/user',\n    [perm('attendance').can('update'), body('users').isArray(), validateParams],\n    asyncRoute(async (req, res) => {\n        try {\n            for (let user of req.body.users) {\n                await checkUsername(user)\n            }\n        } catch (error) {\n            const err = new Error('존재하지 않는 유저입니다.')\n            err.status = 400\n            throw err\n        }\n\n        for (let username of req.body.users) {\n            const user = await User.findOne()\n                .where('username')\n                .equals(username)\n            user.attable = true\n            await user.save()\n        }\n\n        res.end()\n    })\n)\n\n/**\n * @api {delete} /attendance/manage/user/:username 출석 대상 제거\n * @apiDescription 출석 대상에서 <code>username</code> 라는 아이디를 가지는 사용자 제거\n * @apiName delete user\n * @apiGroup AttendanceCheck/manage\n * @apiPermission attendance.can.update\n *\n * @apiParam {String} username 출석대상에서 삭제할 사용자 아이디\n *\n * @apiSuccess {Number} 200 성공\n *\n * @apiSuccessExample {json} Success-Response:\n *      HTTP/1.1 200 OK\n *\n */\nrouter.delete(\n    '/manage/user/:username',\n    [\n        perm('attendance').can('update'),\n        param('username').custom(checkUsername),\n        validateParams,\n    ],\n    asyncRoute(async (req, res) => {\n        const user = await User.findOne()\n            .where('username')\n            .equals(req.params.username)\n        user.attable = false\n        await user.save()\n\n        res.end()\n    })\n)\n\n/**\n * @api {put} /attendance/addUsersRecords 출석 기록 추가\n * @apiDescription 출석 대상이 아니어서 기록이 없는 사용자의 출석기록을 <code>absence</code> 상태로 추가\n * @apiName addUsersRecords\n * @apiGroup AttendanceCheck\n * @apiPermission attendance.can.update\n *\n * @apiParam {String} day 업데이트할 날짜, YYYYMMDD 형태\n * @apiParam {Array} users 출석 대상으로 추가할 사용자정보가 담긴 배열\n *\n * @apiParamExample {json} Request-Example:\n *      {\n *          \"day\":\"20200306\",\n *          \"users\":[\n *                   \"admin\",\n *                   \"hschoi1104\"\n *                  ]\n *      }\n *\n * @apiSuccess {Number} 200 성공\n *\n * @apiSuccessExample {json} Success-Response:\n *      HTTP/1.1 200 OK\n *\n *\n * @apiError {Number} 404 올바르지 않은 사용자가 있을 경우\n *\n * @apiErrorExample {json} Error-Response:\n *       HTTP/1.1 400 Not Found\n * {\n *      존재하지 않는 유저입니다.\n * }\n */\nrouter.put(\n    '/addUsersRecords',\n    [\n        perm('attendance').can('update'),\n        body('users').isArray(),\n        body('day').isString(),\n        validateParams,\n    ],\n    asyncRoute(async (req, res) => {\n        try {\n            for (let user of req.body.users) {\n                await checkUsername(user)\n            }\n        } catch (error) {\n            const err = new Error('존재하지 않는 유저입니다.')\n            err.status = 400\n            throw err\n        }\n\n        for (let user of req.body.users) {\n            const cursor_Day = await AttendanceDay.findOne()\n                .where('day')\n                .equals(req.body.day)\n            if (cursor_Day) cursor_Day.addStatus(user, 'absence')\n\n            const cursor_User = await AttendanceUser.findOne()\n                .where('name')\n                .equals(user)\n\n            if (!cursor_User) {\n                var attendanceUser = new AttendanceUser()\n                attendanceUser.name = user\n                attendanceUser.addStatus(req.body.day, 'absence')\n            } else {\n                cursor_User.addStatus(req.body.day, 'absence')\n            }\n        }\n        res.end()\n    })\n)\n\n/**\n * @api {post} /attendance/attendanceUser 특정 사용자 출결정보 반환\n * @apiDescription <code>name</code>의 아이디를 가지는 사용자의 출결정보 반환\n * @apiName attendanceUser\n * @apiGroup AttendanceCheck\n * @apiPermission attendance.can.update\n *\n * @apiParam {String} name 조회할 사용자 아이디\n *\n * @apiParamExample {json} Request-Example:\n *      {\n *         \"name\":\"admin\"\n *      }\n *\n * @apiSuccess {Array} status 출결정보 객체 배열\n * @apiSuccess {String} name 조회한 사용자 아이디\n *\n * @apiSuccessExample {json} Success-Response:\n *      HTTP/1.1 200 OK\n * {\n *{\n *  \"status\": [\n *    {\n *      \"_id\": \"5e1ff40db7ee260ffc203de9\",\n *      \"date\": \"20200115\",\n *      \"state\": \"late\"\n *    },\n *    {\n *      \"_id\": \"5e1ff480b7ee260ffc203df9\",\n *      \"date\": \"20200116\",\n *      \"state\": \"attendance\"\n *    },\n *  ],\n *  \"name\": \"admin\"\n *}\n * }\n */\nrouter.post(\n    '/attendanceUser',\n    [perm('attendance').can('update'), validateParams],\n    asyncRoute(async function(req, res) {\n        const attendanceUser = await AttendanceUser.findOne({\n            name: req.body.name,\n        }).select({ _id: 0, __v: 0 })\n        res.json(attendanceUser)\n    })\n)\nexport default router\n"]}