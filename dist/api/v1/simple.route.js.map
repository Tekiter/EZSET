{"version":3,"sources":["../../../src/api/v1/simple.route.js"],"names":["router","crypto","require","viewObj","Object","post","can","isString","validateParams","req","res","board","Board","title","body","isAnonymous","save","status","end","error","errr","Error","patch","isNumeric","findOne","where","equals","params","board_id","err","json","message","delete","posts","Post","find","i","length","files","j","remove","get","boards","map","_id","custom","checkAttachableFileArray","user","perm","boardId","parseInt","content","author","username","created_date","Date","now","createHash","update","digest","newpost","id","findById","post_id","target","links","link","ref","prevFiles","indexOf","push","view","setTimeout","splice","like","likes_count","isLike","likes_flag","comment","comments","isPositive","page","query","pagesize","postcount","count","limit","skip","sort","totalpage","comment_count","postId","addComment","comment_id","updateComment","removeComment","likes_create","likes_delete","options","option","RegExp","filter","item","$or","$in"],"mappings":"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","file":"simple.route.js","sourcesContent":["import { Router } from 'express'\nimport { body, param, query } from 'express-validator'\nimport Board from '../../models/Board'\nimport Post from '../../models/Post'\nimport { validateParams, asyncRoute, isPositive } from '../../utils/api'\nimport { perm } from '../../utils/role'\nimport {\n    checkAttachableFileArray,\n    applyFileLink,\n    getFileInfoArray,\n    removeFileLink,\n    deleteUnlinkedFile,\n    checkIsFileOwner,\n    checkUnlinkedFile,\n    getFileLinks,\n} from '../../utils/file'\nconst router = Router()\nconst crypto = require('crypto')\nconst viewObj = new Object()\n\n/**\n * @api {post} /simple/boards/ 게시판 생성\n * @apiDescription 새로운 게시판을 생성한다\n * @apiName 게시판 생성\n * @apiGroup Board\n * @apiPermission can.create\n *\n * @apiParam {String} title 게시판 이름\n * @apiParam {Boolean} isAnonymous 익명게시판 판단\n *\n * @apiSuccess {Number} 201 게시판 생성 성공\n *\n * @apiError {Number} 500 게시판 생성 에러\n */\nrouter.post(\n    '/boards',\n    [\n        perm('manageBoards').can('access'),\n        body('title').isString(),\n        validateParams,\n    ],\n    asyncRoute(async (req, res) => {\n        let board = new Board()\n        board.title = req.body.title\n        board.isAnonymous = req.body.isAnonymous\n\n        try {\n            await board.save()\n            res.status(201).end()\n        } catch (error) {\n            const errr = new Error('database error')\n            errr.status = 500\n            throw errr\n        }\n    })\n)\n\n/**\n * @api {delete} /simple/boards/:board_id 게시판 삭제\n * @apiDescription 게시판을 삭제한다\n * @apiName 게시판 삭제\n * @apiGroup Board\n * @apiPermission can.delete\n * @apiParam {Number} board_id 게시판 아이디\n *\n * @apiSuccess {json} 200 게시판 삭제\n * @apiSuccessExample {json} Success-Response:\n *       HTTP/1.1 200\n *       {\n *          message: '게시판을 삭제했습니다',\n *        }\n *\n * @apiError {json} 404 해당 게시판 없음\n * @apiErrorExample {json} Error-Response:\n *       HTTP/1.1 404\n *       {\n *          message: '존재하지 않는 게시판입니다.',\n *        }\n *\n * @apiError {Number} 500 게시판 삭제 에러\n */\n//게시판 수정\nrouter.patch(\n    '/boards/:board_id',\n    [\n        perm('manageBoards').can('access'),\n        param('board_id').isNumeric(),\n        validateParams,\n    ],\n    asyncRoute(async (req, res) => {\n        const board = await Board.findOne()\n            .where('_id')\n            .equals(req.params.board_id)\n\n        if (!board) {\n            const err = new Error('존재하지 않는 게시판입니다.')\n            err.status = 404\n            throw err\n        }\n        try {\n            board.title = req.body.title\n            await board.save()\n            res.status(200).json({\n                message: '수정 완료',\n            })\n        } catch (error) {\n            const errr = new Error('database error')\n            errr.status = 500\n            throw errr\n        }\n    })\n)\n\n//게시판 삭제\nrouter.delete(\n    '/boards/:board_id',\n    [\n        perm('manageBoards').can('access'),\n        param('board_id').isNumeric(),\n        validateParams,\n    ],\n    asyncRoute(async (req, res) => {\n        const board = await Board.findOne()\n            .where('_id')\n            .equals(req.params.board_id)\n\n        if (!board) {\n            res.status(404).json({\n                message: '존재하지 않는 게시판입니다.',\n            })\n            return\n        }\n\n        try {\n            const posts = await Post.find()\n                .where('board')\n                .equals(req.params.board_id)\n\n            for (let i = 0; i < posts.length; i++) {\n                await removeFileLink(posts[i].files)\n                await deleteUnlinkedFile(posts[i].files)\n            }\n\n            for (let j = 0; j < posts.length; j++) {\n                await posts[j].remove()\n            }\n\n            await board.remove()\n            // await Board.remove({ _id: req.params.board_id })\n            res.status(200).json({\n                message: '게시판을 삭제했습니다',\n            })\n        } catch (error) {\n            const errr = new Error('database error')\n            errr.status = 500\n            throw errr\n        }\n    })\n)\n\n/**\n * @api {get} /simple/boards/ 게시판 목록\n * @apiDescription 게시판 목록을 불러온다\n * @apiName 게시판 목록\n * @apiGroup Board\n *\n * @apiSuccess {json} 200 게시판 목록\n * @apiSuccessExample {json} Success-Response:\n *       HTTP/1.1 200\n *      {\n *          \"_id\": 10,\n *          \"title\": \"test\"\n *      },\n *      {\n *          \"_id\": 11,\n *          \"title\": \"익명게시판\"\n *      }\n *\n * @apiError {json} 404 해당 게시판 없음\n * @apiErrorExample {json} Error-Response:\n *       HTTP/1.1 404\n *       {\n *          message: '존재하지 않는 게시판입니다.',\n *        }\n */\nrouter.get(\n    '/boards',\n    asyncRoute(async (req, res) => {\n        const boards = await Board.find()\n        res.json(\n            boards.map(board => {\n                return {\n                    _id: board._id,\n                    title: board.title,\n                    isAnonymous: board.isAnonymous,\n                }\n            })\n        )\n    })\n)\n\n/**\n * @api {post} /simple/boards/:board_id 게시글 생성\n * @apiDescription 게시글을 첨부파일과 같이 작성한다\n * @apiName 게시글 생성\n * @apiGroup Board\n * @apiPermission can.create\n *\n * @apiParam {Number} board_id 게시판 아이디\n * @apiParam {String} title 게시글 제목\n * @apiParam {String} content 게시글 내용\n * @apiParam {String} files 게시글 첨부파일\n *\n * @apiSuccess {json} 201 게시글 작성\n * @apiSuccessExample {json} Success-Response:\n *       HTTP/1.1 201 OK\n *       {\n *           \"isAnonymous\": false,\n *           \"view\": 0,\n *           \"like\":[],\n *           \"isLike\": false,\n *           \"files\":[\"5e65db86b869b0322cbc1bda\"],\n *           \"board\": 10,\n *           \"title\": \"hello\",\n *           \"content\": \"hhhhh\",\n *           \"author\": \"admin\",\n *           \"created_date\": \"2020-03-09T06:01:45.804Z\",\n *           \"comments\":[],\n *           \"_id\": 101,\n *           \"__v\": 1\n *       }\n * @apiError {Number} 403 권한 없음\n *\n * @apiError {json} 404 해당 게시판 없음\n * @apiErrorExample {json} Error-Response:\n *       HTTP/1.1 404\n *       {\n *          message: no board id 10,\n *       }\n *\n * @apiError {Number} 400 첨부파일 오류\n * @apiErrorExample {String} Error-Response:\n *       HTTP/1.1 404\n *       {\n *          string: 올바르지 않은 첨부파일입니다.\n *       }\n */\nrouter.post(\n    '/boards/:board_id',\n    [\n        param('board_id').isNumeric(),\n        body('title').isString(),\n        body('content').isString(),\n        body('files').custom(checkAttachableFileArray),\n        validateParams,\n    ],\n    asyncRoute(async function(req, res) {\n        if (!req.user.perm('board', req.params.board_id).can('write')) {\n            res.status(403).end()\n            return\n        }\n        const boardId = parseInt(req.params.board_id)\n\n        try {\n            let board = await Board.findOne({ _id: boardId })\n            if (!board) {\n                res.status(404).json({ message: 'no board id ' + boardId })\n                return\n            }\n            if (\n                !checkIsFileOwner(req.body.files) ||\n                !checkUnlinkedFile(req.body.files)\n            ) {\n                const err = new Error('올바르지 않은 첨부파일입니다.')\n                err.status = 400\n                throw err\n            }\n            let post\n            if (board.isAnonymous == false) {\n                post = new Post({\n                    board: boardId,\n                    title: req.body.title,\n                    content: req.body.content,\n                    author: req.user.username,\n                    isAnonymous: false,\n                    created_date: Date.now(),\n                })\n            } else {\n                post = new Post({\n                    board: boardId,\n                    title: req.body.title,\n                    content: req.body.content,\n                    author: crypto\n                        .createHash('sha512')\n                        .update(req.user.username)\n                        .digest('base64'),\n                    isAnonymous: true,\n                    created_date: Date.now(),\n                })\n            }\n\n            let newpost = await post.save()\n\n            // DB 파일 객체에 역참조 등록\n            await applyFileLink(req.body.files, 'boardPost', newpost.id)\n            newpost.files = req.body.files\n\n            await newpost.save()\n\n            res.status(201).json(newpost)\n        } catch (err) {\n            throw err\n        }\n    })\n)\n\n/**\n * @api {delete} /simple/posts/:post_id 게시글 삭제\n * @apiDescription 게시글을 삭제한다\n * @apiName 게시글 삭제\n * @apiGroup Board\n * @apiPermission can.delete\n *\n * @apiParam {Number} post_id 게시판 아이디\n *\n * @apiSuccess {json} 200 게시글 삭제\n * @apiSuccessExample {json} Success-Response:\n *       HTTP/1.1 200 OK\n *       message\": \"post deleted\",\n *          \"target\":{\n *          \"isAnonymous\": false,\n *          \"view\": 0,\n *          \"like\":[],\n *          \"isLike\": false,\n *          \"files\":[\"5e65db86b869b0322cbc1bda\"],\n *          \"_id\": 101,\n *          \"board\": 10,\n *          \"title\": \"hello\",\n *          \"content\": \"hhhhh\",\n *          \"author\": \"admin\",\n *          \"created_date\": \"2020-03-09T06:01:45.804Z\",\n *          \"comments\":[],\n *          \"__v\": 1\n *          }\n *\n * @apiError {Number} 403 권한 없음\n *\n * @apiError {json} 404 해당 게시판 없음\n * @apiErrorExample {json} Error-Response:\n *       HTTP/1.1 404\n *       {\n *          message: no board id 10,\n *       }\n *\n * @apiError {Number} 500 삭제 오류\n * @apiErrorExample {String} Error-Response:\n *       HTTP/1.1 500\n *       {\n *          string: database error\n *       }\n */\nrouter.delete(\n    '/posts/:post_id',\n    [param('post_id').isNumeric(), validateParams],\n    asyncRoute(async function(req, res) {\n        // if (!req.user.perm('board', req.params.board_id).canOwn('delete')) {\n        //     res.status(403).end()\n        //     return\n        // }\n\n        try {\n            let post = await Post.findById(req.params.post_id)\n            if (post) {\n                if (post.isAnonymous == false) {\n                    if (\n                        post.author != req.user.username &&\n                        !req.user\n                            .perm('board', req.params.board_id)\n                            .can('delete')\n                    ) {\n                        res.status(403).end()\n                        return\n                    }\n                } else {\n                    if (\n                        post.author !=\n                            crypto\n                                .createHash('sha512')\n                                .update(req.user.username)\n                                .digest('base64') &&\n                        !req.user\n                            .perm('board', req.params.board_id)\n                            .can('delete')\n                    ) {\n                        res.status(403).end()\n                        return\n                    }\n                }\n\n                await removeFileLink(post.files)\n                await deleteUnlinkedFile(post.files)\n\n                await post.delete()\n                res.status(200).json({ message: 'post deleted', target: post })\n            } else {\n                res.status(404).json({\n                    message: 'no post id ' + req.params.post_id,\n                })\n            }\n        } catch (error) {\n            const errr = new Error('database error')\n            errr.status = 500\n            throw errr\n        }\n    })\n)\n\n/**\n * @api {patch} /simple/posts/:post_id 게시글 수정\n * @apiDescription 게시글을 수정한다\n * @apiName 게시글 수정\n * @apiGroup Board\n * @apiPermission can.update\n *\n * @apiParam {Number} board_id 게시판 아이디\n * @apiParam {String} title 게시글 제목\n * @apiParam {String} content 게시글 내용\n * @apiParam {String} files 게시글 첨부파일\n *\n * @apiSuccess {json} 200 게시글 수정\n * @apiSuccessExample {json} Success-Response:\n *       HTTP/1.1 200 OK\n *       message\": '수정 완료',\n *          \"target\":{\n *          \"isAnonymous\": false,\n *          \"view\": 0,\n *          \"like\":[],\n *          \"isLike\": false,\n *          \"files\":[\"5e65db86b869b0322cbc1bda\"],\n *          \"_id\": 101,\n *          \"board\": 10,\n *          \"title\": \"hello\",\n *          \"content\": \"hhhhh\",\n *          \"author\": \"admin\",\n *          \"created_date\": \"2020-03-09T06:01:45.804Z\",\n *          \"comments\":[],\n *          \"__v\": 1\n *          }\n *\n * @apiError {Number} 403 권한 없음\n *\n * @apiError {json} 404 해당 게시판 없음\n * @apiErrorExample {json} Error-Response:\n *       HTTP/1.1 404\n *       {\n *          message: no board id 10,\n *       }\n */\nrouter.patch(\n    '/posts/:post_id',\n    [\n        param('post_id').isNumeric(),\n        body('title').isString(),\n        body('content').isString(),\n        body('files').custom(checkAttachableFileArray),\n        validateParams,\n    ],\n    asyncRoute(async function(req, res) {\n        // if (!req.user.perm('board', req.params.board_id).canOwn('update')) {\n        //     res.status(403).end()\n        //     return\n        // }\n        let post = await Post.findById(req.params.post_id)\n\n        if (post) {\n            if (post.isAnonymous == false) {\n                if (post.author != req.user.username) {\n                    res.status(403).end()\n                    return\n                }\n            } else {\n                if (\n                    post.author !=\n                    crypto\n                        .createHash('sha512')\n                        .update(req.user.username)\n                        .digest('base64')\n                ) {\n                    res.status(403).end()\n                    return\n                }\n            }\n\n            // 첨부할 파일들이 본인이 업로드한 파일들인지 체크\n            if (!checkIsFileOwner(req.body.files)) {\n                const err = new Error('올바르지 않은 첨부파일입니다.')\n                err.status = 400\n                throw err\n            }\n            // 이미 첨부된 파일을 첨부하는지 검사\n            const links = await getFileLinks(req.body.files)\n            for (let link of links) {\n                if (link.target !== 'boardPost' || link.ref !== post.id) {\n                    const err = new Error('올바르지 않은 첨부파일입니다.')\n                    err.status = 400\n                    throw err\n                }\n            }\n\n            if (req.body.content) {\n                post.title = req.body.title\n                post.content = req.body.content\n            }\n            const newpost = await post.save()\n            const prevFiles = newpost.files\n\n            // 기존 파일들의 역참조 삭제\n            await removeFileLink(prevFiles)\n\n            // 새로운 파일들의 역참조 등록\n            await applyFileLink(req.body.files, 'boardPost', newpost.id)\n            newpost.files = req.body.files\n\n            await newpost.save()\n\n            // 기존에는 첨부되었지만, 수정시 제거된 파일들의 처리\n            await deleteUnlinkedFile(prevFiles)\n\n            res.status(200).json({\n                message: '수정 완료',\n                target: post,\n            })\n        } else {\n            res.status(404).json({\n                message: 'no post id' + req.params.post_id,\n            })\n        }\n    })\n)\n\n/**\n * @api {get} /simple/posts/:post_id 게시글 목록 보기\n * @apiDescription 해당 게시판의 게시글 목록을 불러온다\n * @apiName 게시글 목록 보기\n * @apiGroup Board\n *\n * @apiParam {Number} post_id 게시판 아이디\n */\nrouter.get(\n    '/posts/:post_id',\n    [param('post_id').isNumeric(), validateParams],\n    asyncRoute(async function(req, res) {\n        const post = await Post.findOne()\n            .where('_id')\n            .equals(req.params.post_id)\n\n        if (!req.user.perm('board', post.board).can('read')) {\n            const err = new Error('권한이 없습니다.')\n            err.status = 403\n            throw err\n        }\n\n        if (post) {\n            //조회수 증가 viewObj 오브젝트 만들어서 post_id : [username] 형식으로 저장\n            if (!viewObj[req.params.post_id]) {\n                viewObj[req.params.post_id] = []\n            }\n            if (viewObj[req.params.post_id].indexOf(req.user.username) == -1) {\n                //username이 없다면 배열에 추가하고 조회수 증가\n                viewObj[req.params.post_id].push(req.user.username)\n                post.view++\n                setTimeout(() => {\n                    //10분이 지나면 배열에서 삭제해서 다시 조회수가 증가할 수 있게 만듦\n                    viewObj[req.params.post_id].splice(\n                        viewObj[req.params.post_id].indexOf(req.user.username),\n                        1\n                    )\n                }, 600000)\n                for (let i in viewObj) {\n                    //username이 하나도 없으면 해당 오브젝트 삭제\n                    if (i.length == 0) {\n                        delete viewObj.i\n                    }\n                }\n            }\n\n            await post.save()\n            res.status(200).json({\n                _id: parseInt(post.id),\n                title: post.title,\n                content: post.content,\n                author: post.author,\n                isAnonymous: post.isAnonymous,\n                created_date: post.created_date,\n                view: post.view,\n                like: post.likes_count,\n                isLike: post.likes_flag(req.user.username),\n                comment: post.comments,\n                files: await getFileInfoArray(post.files),\n            })\n        } else {\n            res.status(404).json({\n                message: 'no post id ' + req.params.post_id,\n            })\n        }\n    })\n)\n\n//게시글 목록 보기\nrouter.get(\n    '/boards/:board_id',\n    [\n        param('board_id').isNumeric(),\n        query('page').custom(isPositive),\n        query('pagesize').custom(isPositive),\n        validateParams,\n    ],\n    asyncRoute(async function(req, res) {\n        if (!req.user.perm('board', req.params.board_id).can('read')) {\n            const err = new Error('권한이 없습니다.')\n            err.status = 403\n            throw err\n        }\n\n        let boardId = parseInt(req.params.board_id)\n\n        try {\n            let board = await Board.findOne({ _id: boardId })\n            if (!board) {\n                res.status(404).json({ message: 'no board id ' + boardId })\n                return\n            }\n\n            const page = parseInt(req.query.page)\n            const pagesize = parseInt(req.query.pagesize || 8)\n\n            let postcount = await Post.find()\n                .count()\n                .where('board')\n                .equals(boardId)\n\n            let posts = await Post.find()\n                .where('board')\n                .equals(boardId)\n                .limit(pagesize)\n                .skip((page - 1) * pagesize)\n                .sort('-_id')\n            res.status(200).json({\n                board: board,\n                totalpage: postcount,\n                posts: posts.map(post => {\n                    return {\n                        _id: parseInt(post.id),\n                        title: post.title,\n                        content: post.content,\n                        author: post.author,\n                        isAnonymous: post.isAnonymous,\n                        created_date: post.created_date,\n                        view: post.view,\n                        like: post.likes_count,\n                        comment_count: post.comments.length,\n                        comment: post.comments,\n                    }\n                }),\n            })\n        } catch (error) {\n            const errr = new Error('database error')\n            errr.status = 500\n            throw errr\n        }\n    })\n)\n\n//댓글 작성\nrouter.post(\n    '/posts/:post_id/comment',\n    [param('post_id').isNumeric(), body('content').isString(), validateParams],\n    asyncRoute(async function(req, res) {\n        let postId = parseInt(req.params.post_id)\n        let post = await Post.findOne({ _id: postId })\n\n        if (!req.user.perm('board', post.board).can('read')) {\n            const err = new Error('권한이 없습니다.')\n            err.status = 403\n            throw err\n        }\n        if (req.body.content.length > 300) {\n            const err = new Error('댓글은 300자를 넘을 수 없습니다.')\n            err.status = 500\n            return\n        }\n        if (!post) {\n            res.status(404).json({ message: 'no post id ' + postId })\n            return\n        }\n        if (post.isAnonymous == true) {\n            await post.addComment(\n                req.body.content,\n                crypto\n                    .createHash('sha512')\n                    .update(req.user.username)\n                    .digest('base64')\n            )\n        } else {\n            await post.addComment(req.body.content, req.user.username)\n        }\n        res.status(201).json({ message: '댓글 작성 완료' })\n    })\n)\n\n//댓글 수정\nrouter.patch(\n    '/posts/:post_id/comment/:comment_id',\n    [param('post_id').isNumeric(), body('content').isString(), validateParams],\n    asyncRoute(async function(req, res) {\n        let post = await Post.findOne()\n            .where('_id')\n            .equals(req.params.post_id)\n        if (!post) {\n            res.status(404).json({\n                message: 'no post id ' + req.params.comment_id,\n            })\n            return\n        }\n\n        if (!req.user.perm('board', post.board).can('read')) {\n            const err = new Error('권한이 없습니다.')\n            err.status = 403\n            throw err\n        }\n        if (req.body.content.length > 300) {\n            const err = new Error('댓글은 300자를 넘을 수 없습니다.')\n            err.status = 500\n            return\n        }\n        if (post.isAnonymous == false) {\n            if (post.author != req.user.username) {\n                res.status(403).end()\n                return\n            }\n        } else {\n            if (\n                post.author !=\n                crypto\n                    .createHash('sha512')\n                    .update(req.user.username)\n                    .digest('base64')\n            ) {\n                res.status(403).end()\n                return\n            }\n        }\n\n        await post.updateComment(req.body.content, req.params.comment_id)\n\n        res.status(201).json({ message: '댓글 수정 완료' })\n    })\n)\n\n//댓글 삭제\nrouter.delete(\n    '/posts/:post_id/comment/:comment_id',\n    [\n        param('post_id').isNumeric(),\n        param('comment_id').isNumeric(),\n        validateParams,\n    ],\n    asyncRoute(async function(req, res) {\n        let post = await Post.findOne()\n            .where('_id')\n            .equals(req.params.post_id)\n\n        if (!post) {\n            res.status(404).json({\n                message: 'no post id ' + req.params.comment_id,\n            })\n            return\n        }\n\n        if (!req.user.perm('board', post.board).can('delete')) {\n            const err = new Error('권한이 없습니다.')\n            err.status = 403\n            throw err\n        }\n\n        if (post.isAnonymous == false) {\n            if (\n                post.author != req.user.username &&\n                !req.user.perm('board', req.params.comment_id).can('delete')\n            ) {\n                res.status(403).end()\n                return\n            }\n        } else {\n            if (\n                post.author !=\n                    crypto\n                        .createHash('sha512')\n                        .update(req.user.username)\n                        .digest('base64') &&\n                !req.user.perm('board', req.params.comment_id).can('delete')\n            ) {\n                res.status(403).end()\n                return\n            }\n        }\n        await post.removeComment(req.params.comment_id)\n        res.status(200).json({ message: '삭제 성공' })\n    })\n)\n\n//좋아요 생성\nrouter.post(\n    '/posts/:post_id/like',\n    [param('post_id').isNumeric(), validateParams],\n    asyncRoute(async function(req, res) {\n        let postId = parseInt(req.params.post_id)\n        let post = await Post.findOne({ _id: postId })\n\n        if (!post) {\n            res.status(404).json({ message: 'no post id ' + postId })\n            return\n        }\n\n        if (!req.user.perm('board', post.board).can('read')) {\n            const err = new Error('권한이 없습니다.')\n            err.status = 403\n            throw err\n        }\n\n        await post.likes_create(req.user.username)\n        res.status(201).json({ message: '좋아요 생성 완료' })\n    })\n)\n\n//좋아요 삭제\nrouter.delete(\n    '/posts/:post_id/like',\n    [param('post_id').isNumeric(), validateParams],\n    asyncRoute(async function(req, res) {\n        let postId = parseInt(req.params.post_id)\n        let post = await Post.findOne({ _id: postId })\n        if (!post) {\n            res.status(404).json({ message: 'no post id ' + postId })\n            return\n        }\n\n        if (!req.user.perm('board', post.board).can('read')) {\n            const err = new Error('권한이 없습니다.')\n            err.status = 403\n            throw err\n        }\n        await post.likes_delete(req.user.username)\n        res.status(201).json({ message: '좋아요 삭제 완료' })\n    })\n)\n\n//게시물 검색\nrouter.get(\n    '/searchpost',\n    [\n        query('content'),\n        query('option'),\n        query('page').custom(isPositive),\n        query('pagesize').custom(isPositive),\n        validateParams,\n    ],\n    asyncRoute(async function(req, res) {\n        let options = []\n        if (req.query.option == 'title') {\n            options = [{ title: new RegExp(req.query.content) }]\n        } else if (req.query.option == 'content') {\n            options = [{ content: new RegExp(req.query.content) }]\n        } else if (req.query.option == 'title+content') {\n            options = [\n                { title: new RegExp(req.query.content) },\n                { content: new RegExp(req.query.content) },\n            ]\n        } else {\n            const err = new Error('검색 옵션이 없습니다.')\n            err.status = 400\n            throw err\n        }\n\n        const board = (await Board.find())\n            .filter(item => {\n                return req.user.perm('board', item.id + '').can('read')\n            })\n            .map(item => item.id)\n\n        try {\n            const page = parseInt(req.query.page)\n            const pagesize = parseInt(req.query.pagesize || 8)\n\n            let postcount = await Post.find({\n                $or: options,\n                board: { $in: board },\n            }).count()\n\n            const posts = await Post.find({\n                $or: options,\n                board: { $in: board },\n            })\n                .limit(pagesize)\n                .skip((page - 1) * pagesize)\n\n            res.status(200).json({\n                totalpage: postcount,\n                posts: posts.map(post => {\n                    return {\n                        board: post.board,\n                        _id: parseInt(post.id),\n                        title: post.title,\n                        content: post.content,\n                        author: post.author,\n                        isAnonymous: post.isAnonymous,\n                        created_date: post.created_date,\n                        view: post.view,\n                        like: post.likes_count,\n                        comment_count: post.comments.length,\n                        comment: post.comments,\n                    }\n                }),\n            })\n        } catch (error) {\n            const errr = new Error('database error')\n            errr.status = 500\n            throw errr\n        }\n    })\n)\n\nexport default router\n"]}