{"version":3,"sources":["../../../src/api/v1/index.js"],"names":["router","indexJs","path","basename","__filename","fs","readdirSync","__dirname","filter","file","indexOf","slice","forEach","routeFile","subrouter","require","default","middlewares","use","err","Error","loginNotRequired","push","loginRequired","getRoleMiddleware","split"],"mappings":";;;;;;AAAA;;;;AACA;;;;AAEA;;AAEA;;AACA;;;;AAEA;AACA;AACA;AACA;;AAEA,MAAMA,SAAS,sBAAf;AAXA;;AAYA,MAAMC,UAAUC,eAAKC,QAAL,CAAcC,UAAd,CAAhB;;AAEAC,aAAGC,WAAH,CAAeC,SAAf,EACKC,MADL,CAEQC,QACIA,KAAKC,OAAL,CAAa,GAAb,MAAsB,CAAtB,IACAD,SAASR,OADT,IAEAQ,KAAKE,KAAL,CAAW,CAAC,CAAZ,MAAmB,WAL/B,EAOKC,OAPL,CAOaC,aAAa;AAClB,UAAMC,YAAYC,QAAS,KAAIF,SAAU,EAAvB,EAA0BG,OAA5C;AACA,UAAMC,cAAc,EAApB;;AAEA,QAAI,CAACH,SAAD,IAAc,CAACA,UAAUI,GAA7B,EAAkC;AAC9B,cAAMC,MAAMC,MAAO,wBAAuBP,SAAU,GAAxC,CAAZ;AACA,cAAMM,GAAN;AACH;;AAED;;AAEA,QAAI,CAACL,UAAUO,gBAAf,EAAiC;AAC7BJ,oBAAYK,IAAZ,CAAiBC,mBAAjB;AACAN,oBAAYK,IAAZ,CAAiBE,uBAAjB;AACH;;AAEDxB,WAAOkB,GAAP,CAAY,IAAGL,UAAUY,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAAwB,EAAvC,EAA0CR,WAA1C,EAAuDH,SAAvD;AACH,CAxBL;;kBA0Bed,M","file":"index.js","sourcesContent":["import fs from 'fs'\nimport path from 'path'\n// import nocache from 'nocache'\nimport { Router } from 'express'\n\nimport { loginRequired } from '../../utils/auth'\nimport { getRoleMiddleware } from '../../utils/role'\n\n// const noCacheMiddleware = nocache()\n// const noCacheMiddleware = (req, res, next) => {\n//     next()\n// }\n\nconst router = Router()\nconst indexJs = path.basename(__filename)\n\nfs.readdirSync(__dirname)\n    .filter(\n        file =>\n            file.indexOf('.') !== 0 &&\n            file !== indexJs &&\n            file.slice(-9) === '.route.js'\n    )\n    .forEach(routeFile => {\n        const subrouter = require(`./${routeFile}`).default\n        const middlewares = []\n\n        if (!subrouter || !subrouter.use) {\n            const err = Error(`Invalid router file '${routeFile}'`)\n            throw err\n        }\n\n        // middlewares.push(noCacheMiddleware)\n\n        if (!subrouter.loginNotRequired) {\n            middlewares.push(loginRequired)\n            middlewares.push(getRoleMiddleware)\n        }\n\n        router.use(`/${routeFile.split('.')[0]}`, middlewares, subrouter)\n    })\n\nexport default router\n"]}