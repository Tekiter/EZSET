{"version":3,"sources":["../../../src/api/v1/file.route.js"],"names":["router","get","isMongoId","validateParams","req","res","fileinfo","params","file_id","json","err","Error","status","post","upload","single","file","filename","id","size","fullpath","download","message","can","end"],"mappings":";;;;;;AAMA;;AACA;;AAQA;;AACA;;AACA;;AAEA,MAAMA,SAAS,sBAAf;;AAEA;;;;;;;;;;;;;;;;;;;;;AArBA;;;;;;AA0CAA,OAAOC,GAAP,CACI,gBADJ,EAEI,CAAC,6BAAM,SAAN,EAAiBC,SAAjB,EAAD,EAA+BC,mBAA/B,CAFJ,EAGI,qBAAW,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC3B,UAAMC,WAAW,MAAM,uBAAYF,IAAIG,MAAJ,CAAWC,OAAvB,CAAvB;AACA,QAAIF,QAAJ,EAAc;AACVD,YAAII,IAAJ,CAASH,QAAT;AACH,KAFD,MAEO;AACH;AACA,cAAMI,MAAM,IAAIC,KAAJ,CAAU,gBAAV,CAAZ;AACAD,YAAIE,MAAJ,GAAa,GAAb;AACA,cAAMF,GAAN;AACH;AACJ,CAVD,CAHJ;;AAgBA;;;;;;;;;;;;;;;AAeAV,OAAOa,IAAP,CACI,SADJ,EAEIC,aAAOC,MAAP,CAAc,MAAd,CAFJ,EAGI,qBAAW,OAAOX,GAAP,EAAYC,GAAZ,KAAoB;AAC3B;AACA,sCAAuBD,IAAIY,IAAJ,CAASC,QAAhC,EAA0C,MAA1C;;AAEAZ,QAAII,IAAJ,CAAS;AACLS,YAAId,IAAIY,IAAJ,CAASC,QADR;AAELE,cAAMf,IAAIY,IAAJ,CAASG;AAFV,KAAT;AAIH,CARD,CAHJ;;AAcA;;;;;;;AAOAnB,OAAOC,GAAP,CACI,oBADJ,EAEI,CAAC,6BAAM,SAAN,EAAiBC,SAAjB,EAAD,EAA+BC,mBAA/B,CAFJ,EAGI,qBAAW,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC3B,UAAMC,WAAW,MAAM,uBAAYF,IAAIG,MAAJ,CAAWC,OAAvB,CAAvB;AACA,QAAIF,QAAJ,EAAc;AACV,cAAMc,WAAW,uBAAYhB,IAAIG,MAAJ,CAAWC,OAAvB,CAAjB;AACAH,YAAIgB,QAAJ,CAAaD,QAAb,EAAuBd,SAASW,QAAhC,EAA0C,MAAMP,GAAN,IAAa;AACnD,gBAAIA,GAAJ,EAAS;AACLL,oBAAIO,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AACjBa,6BAAS;AADQ,iBAArB;AAGH,aAJD,MAIO;AACH,sBAAM,2BAAgBlB,IAAIG,MAAJ,CAAWC,OAA3B,CAAN;AACH;AACJ,SARD;AASH,KAXD,MAWO;AACHH,YAAIO,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB,EAAEa,SAAS,gBAAX,EAArB;AACH;AACJ,CAhBD,CAHJ;;AAsBA;;;;;;AAMAtB,OAAOa,IAAP,CACI,iBADJ,EAEI,CAAC,gBAAK,cAAL,EAAqBU,GAArB,CAAyB,QAAzB,CAAD,EAAqCpB,mBAArC,CAFJ,EAGI,qBAAW,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC3B,UAAM,iCAAN;AACAA,QAAIO,MAAJ,CAAW,GAAX,EAAgBY,GAAhB;AACH,CAHD,CAHJ;kBAQexB,M","file":"file.route.js","sourcesContent":["/*\nfile.route.js\n파일 업로드와 다운로드를 관리하는 Route\n\n*/\n\nimport { Router } from 'express'\nimport {\n    upload,\n    getFileInfo,\n    getFilePath,\n    increaseFileHit,\n    setUploadExpireTimeout,\n    cleanupUnlinkedFiles,\n} from '../../utils/file'\nimport { asyncRoute, validateParams } from '../../utils/api'\nimport { param } from 'express-validator'\nimport { perm } from '../../utils/role'\n\nconst router = Router()\n\n/**\n * @api {get} /file/info/:file_id 업로드된 파일 정보\n * @apiDescription 업로드된 파일에 대한 기본 정보를 가져옴\n * @apiName FileInfo\n * @apiGroup File\n * @apiParam {String} file_id 파일의 id\n * @apiSuccess {String} id 파일의 id\n * @apiSuccess {String} filename 파일의 이름\n * @apiSuccess {Number} size 파일의 크기\n * @apiSuccess {String} uploader 파일을 올린 유저의 아이디\n * @apiSuccess {Datetime} timestamp 파일을 올린 시간\n * @apiSuccessExample {json} Success-Response:\n *      HTTP/1.1 200 OK\n *      {\n *        \"id\": \"5e2c0c86850bef7560bfa898\",\n *        \"filename\": \"1.PNG\",\n *        \"size\": 34850,\n *        \"uploader\": \"helloworld\",\n *        \"timestamp\": \"2020-01-25T09:38:14.533Z\"\n *      }\n */\nrouter.get(\n    '/info/:file_id',\n    [param('file_id').isMongoId(), validateParams],\n    asyncRoute(async (req, res) => {\n        const fileinfo = await getFileInfo(req.params.file_id)\n        if (fileinfo) {\n            res.json(fileinfo)\n        } else {\n            // await deleteFile(req.params.file_id)\n            const err = new Error('존재하지 않는 파일입니다.')\n            err.status = 404\n            throw err\n        }\n    })\n)\n\n/**\n * @api {post}} /file/upload 파일 업로드\n * @apiDescription 파일을 서버에 업로드한다.\n * @apiName UploadFile\n * @apiGroup File\n * @apiParam {File} file 파일의 이진 데이터\n * @apiSuccess {String} id 업로드된 파일의 id\n * @apiSuccess {Number} size 업로드된 파일의 크기\n * @apiSuccessExample {json} Success-Response:\n *      HTTP/1.1 200 OK\n *      {\n *        \"id\":\"5e7480be9c20a25c88590aab\",\n *        \"size\":34850\n *      }\n */\nrouter.post(\n    '/upload',\n    upload.single('file'),\n    asyncRoute(async (req, res) => {\n        // 업로드 이후 5분동안 첨부가 없으면, 파일을 자동 삭제한다.\n        setUploadExpireTimeout(req.file.filename, 300000)\n\n        res.json({\n            id: req.file.filename,\n            size: req.file.size,\n        })\n    })\n)\n\n/**\n * @api {get} /file/download/:file_id 파일 다운로드\n * @apiDescription 업로드된 파일을 다운로드한다. 요청시 파일의 이진 데이터가 결과로 전송된다.\n * @apiName DownloadFile\n * @apiGroup File\n * @apiParam {String} file_id 파일의 id\n */\nrouter.get(\n    '/download/:file_id',\n    [param('file_id').isMongoId(), validateParams],\n    asyncRoute(async (req, res) => {\n        const fileinfo = await getFileInfo(req.params.file_id)\n        if (fileinfo) {\n            const fullpath = getFilePath(req.params.file_id)\n            res.download(fullpath, fileinfo.filename, async err => {\n                if (err) {\n                    res.status(404).json({\n                        message: '삭제된 파일입니다.',\n                    })\n                } else {\n                    await increaseFileHit(req.params.file_id)\n                }\n            })\n        } else {\n            res.status(404).json({ message: '존재하지 않는 파일입니다.' })\n        }\n    })\n)\n\n/**\n * @api {get} /file/manage/cleanup 파일 폴더 정리\n * @apiDescription 사용되지 않지만, 디스크에 남아있는 파일을 삭제하여 용량을 확보한다.\n * @apiName CleanupFiles\n * @apiGroup File\n */\nrouter.post(\n    '/manage/cleanup',\n    [perm('manageServer').can('access'), validateParams],\n    asyncRoute(async (req, res) => {\n        await cleanupUnlinkedFiles()\n        res.status(200).end()\n    })\n)\nexport default router\n"]}