{"version":3,"sources":["../../../src/api/v1/penalty.route.js"],"names":["router","moment","require","get","can","isString","validateParams","req","res","result","attendanceUser","AttendanceUser","findOne","name","params","username","select","_id","__v","penaltyConfig","PenaltyConfig","find","status","forEach","element","date","query","start_date","end_date","state","Val","item","idx","key","push","type","format","description","point","value","val","penalty","Penalty","$gte","$lte","json","post","body","save","end","findOneAndDelete"],"mappings":"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","file":"penalty.route.js","sourcesContent":["import Router from 'express'\nimport { asyncRoute, validateParams } from '../../utils/api'\nimport Penalty from '../../models/Penalty/Penalty'\nimport PenaltyConfig from '../../models/Penalty/PenaltyConfig'\nimport AttendanceUser from '../../models/attendanceUser'\nimport { perm } from '../../utils/role'\nimport { param, body, query } from 'express-validator'\nconst router = Router()\nvar moment = require('moment')\n\n/**\n * @api {get} /penalty/read/:username 상벌점 조회\n * @apiDescription 사용자의 상벌점 조회\n * @apiName penaltyRead\n * @apiGroup Penalty\n * @apiPermission penalty.can.read\n *\n * @apiParam {String} username 조회할 사용자의 아이디\n * @apiParam {String} start_date 기간 조회 시작 날짜\n * @apiParam {String} end_date 기간 조회 종료 날짜\n *\n * @apiSuccess {Array} - 사용자의 상벌점 항목을 배열로 반환\n * @apiSuccess {String} type 상벌점 항목의 타입\n * @apiSuccess {String} date 상벌점 항목이 기록된 날짜\n * @apiSuccess {String} description 상벌점 항목의 설명\n * @apiSuccess {Number} point 상벌점 항목의 점수\n *\n * @apiSuccessExample {json} Success-Response:\n *      HTTP/1.1 200 OK\n *      {\n *          [{\n *              type:\"지각\",\n *              date:\"2020-03-19\",\n *              description:\"지각\",\n *              point:-1\n *          }]\n *      }\n */\nrouter.get(\n    '/read/:username',\n    [\n        perm('penalty').can('read'),\n        param('username').isString(),\n        query('start_date').isString(),\n        query('end_date').isString(),\n        validateParams,\n    ],\n    asyncRoute(async function(req, res) {\n        var result = []\n        var attendanceUser = await AttendanceUser.findOne({\n            name: req.params.username,\n        }).select({ _id: 0, __v: 0, name: 0 })\n\n        var penaltyConfig = await PenaltyConfig.find()\n\n        attendanceUser.status.forEach(element => {\n            if (\n                moment(element.date) >= moment(req.query.start_date) &&\n                moment(element.date) <= moment(req.query.end_date)\n            ) {\n                if (element.state == 'late') {\n                    var Val = penaltyConfig.find((item, idx) => {\n                        return item.key === '지각'\n                    })\n                    result.push({\n                        username: req.params.username,\n                        type: '지각',\n                        date: moment(element.date).format('YYYY-MM-DD'),\n                        description: '지각',\n                        point: Val.value,\n                    })\n                }\n                if (element.state == 'absence') {\n                    var val = penaltyConfig.find((item, idx) => {\n                        return item.key === '결석'\n                    })\n                    result.push({\n                        username: req.params.username,\n                        type: '결석',\n                        date: moment(element.date).format('YYYY-MM-DD'),\n                        description: '결석',\n                        point: val.value,\n                    })\n                }\n            }\n        })\n\n        var penalty = await Penalty.find({\n            username: req.params.username,\n            date: {\n                $gte: moment(req.query.start_date).format('YYYY-MM-DD'),\n                $lte: moment(req.query.end_date).format('YYYY-MM-DD'),\n            },\n        })\n\n        penalty.forEach(element => {\n            var val = penaltyConfig.find((item, idx) => {\n                return item.key === element.type\n            })\n            result.push({\n                username: req.params.username,\n                type: element.type,\n                date: moment(element.date).format('YYYY-MM-DD'),\n                description: element.description,\n                point: val.value,\n            })\n        })\n\n        res.json(result)\n    })\n)\n\n/**\n * @api {post} /penalty/write/ 상벌점 쓰기\n * @apiDescription 사용자의 상벌점 기록\n * @apiName penaltyWrite\n * @apiGroup Penalty\n * @apiPermission penalty.can.update\n *\n * @apiParam {String} username 조회할 사용자의 아이디\n * @apiParam {String} type 상벌점 항목 타입\n * @apiParam {String} description 상벌점 항목 설명\n * @apiParam {String} date 상벌점 항목 부여 날짜\n *\n * @apiParamExample {post} Request-Example:\n *      {\n *          username : \"admin\",\n *          type : \"과제 지각\",\n *          description : \"과제 지각\"\n *          date : \"2020-03-19\"\n *      }\n *\n * @apiSuccess {200} code 기록 성공시 코드\n *\n * @apiSuccessExample {json} Success-Response:\n *      HTTP/1.1 200 OK\n */\nrouter.post(\n    '/write',\n    [\n        perm('penalty').can('update'),\n        body('type').isString(),\n        body('date').isString(),\n        body('username').isString(),\n        body('description').isString(),\n        validateParams,\n    ],\n    asyncRoute(async function(req, res) {\n        var penalty = new Penalty()\n        penalty.type = req.body.type\n        penalty.username = req.body.username\n        penalty.date = req.body.date\n        penalty.description = req.body.description\n\n        await penalty.save()\n\n        res.end()\n    })\n)\n\n/**\n * @api {post} /penalty/delete/ 상벌점 삭제\n * @apiDescription 사용자의 상벌점 삭제\n * @apiName penaltyDelete\n * @apiGroup Penalty\n * @apiPermission penalty.can.update\n *\n * @apiParam {String} username 조회할 사용자의 아이디\n * @apiParam {String} type 상벌점 항목 타입\n * @apiParam {String} description 상벌점 항목 설명\n * @apiParam {String} date 상벌점 항목 부여 날짜\n *\n * @apiParamExample {post} Request-Example:\n *      {\n *          username : \"admin\",\n *          type : \"과제 지각\",\n *          description : \"과제 지각\"\n *          date : \"2020-03-19\"\n *      }\n *\n * @apiSuccess {200} code 기록 성공시 코드\n *\n * @apiSuccessExample {json} Success-Response:\n *      HTTP/1.1 200 OK\n */\nrouter.post(\n    '/delete/',\n    [\n        perm('penalty').can('update'),\n        body('username').isString(),\n        body('date').isString(),\n        body('type').isString(),\n        body('description').isString(),\n        validateParams,\n    ],\n    asyncRoute(async function(req, res) {\n        await Penalty.findOneAndDelete({\n            type: req.body.type,\n            username: req.body.username,\n            date: req.body.date,\n            description: req.body.description,\n        })\n        res.end()\n    })\n)\n\nexport default router\n"]}