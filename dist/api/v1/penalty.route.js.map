{"version":3,"sources":["../../../src/api/v1/penalty.route.js"],"names":["router","moment","require","get","can","isString","validateParams","req","res","result","attendanceUser","AttendanceUser","findOne","name","params","username","select","_id","__v","penaltyConfig","PenaltyConfig","find","status","forEach","element","date","query","start_date","end_date","state","Val","item","idx","key","push","type_id","type","format","description","point","value","val","penalty","Penalty","$gte","$lte","json","user","post","isArray","body","users","save","end","delete","findOneAndDelete"],"mappings":"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","file":"penalty.route.js","sourcesContent":["import Router from 'express'\nimport { asyncRoute, validateParams } from '../../utils/api'\nimport Penalty from '../../models/Penalty/Penalty'\nimport PenaltyConfig from '../../models/Penalty/PenaltyConfig'\nimport AttendanceUser from '../../models/attendanceUser'\nimport { perm } from '../../utils/role'\nimport { param, body, query } from 'express-validator'\nconst router = Router()\nvar moment = require('moment')\n\n/**\n * @api {get} /penalty/read/:username 상벌점 조회\n * @apiDescription 사용자의 상벌점 조회\n * @apiName penaltyRead\n * @apiGroup Penalty\n * @apiPermission penalty.can.read\n *\n * @apiParam {String} username 조회할 사용자의 아이디\n * @apiParam {String} start_date 기간 조회 시작 날짜\n * @apiParam {String} end_date 기간 조회 종료 날짜\n *\n * @apiSuccess {Array} - 사용자의 상벌점 항목을 배열로 반환\n * @apiSuccess {String} type 상벌점 항목의 타입\n * @apiSuccess {String} date 상벌점 항목이 기록된 날짜\n * @apiSuccess {String} description 상벌점 항목의 설명\n * @apiSuccess {Number} point 상벌점 항목의 점수\n *\n * @apiSuccessExample {json} Success-Response:\n *      HTTP/1.1 200 OK\n *      {\n *          [{\n *              type:\"지각\",\n *              date:\"2020-03-19\",\n *              description:\"지각\",\n *              point:-1\n *          }]\n *      }\n */\nrouter.get(\n    '/read/:username', [\n        perm('penalty').can('read'),\n        param('username').isString(),\n        query('start_date').isString(),\n        query('end_date').isString(),\n        validateParams,\n    ],\n    asyncRoute(async function(req, res) {\n        var result = []\n        var attendanceUser = await AttendanceUser.findOne({\n            name: req.params.username,\n        }).select({ _id: 0, __v: 0, name: 0 })\n\n        var penaltyConfig = await PenaltyConfig.find()\n        if (attendanceUser != null) {\n            attendanceUser.status.forEach(element => {\n                if (\n                    moment(element.date) >= moment(req.query.start_date) &&\n                    moment(element.date) <= moment(req.query.end_date)\n                ) {\n                    if (element.state == 'late') {\n                        var Val = penaltyConfig.find((item, idx) => {\n                            return item.key === '지각'\n                        })\n                        result.push({\n                            type_id: Val._id,\n                            username: req.params.username,\n                            type: '지각',\n                            date: moment(element.date).format('YYYY-MM-DD'),\n                            description: '지각',\n                            point: Val.value,\n                        })\n                    }\n                    if (element.state == 'absence') {\n                        var val = penaltyConfig.find((item, idx) => {\n                            return item.key === '결석'\n                        })\n                        result.push({\n                            type_id: val._id,\n                            username: req.params.username,\n                            type: '결석',\n                            date: moment(element.date).format('YYYY-MM-DD'),\n                            description: '결석',\n                            point: val.value,\n                        })\n                    }\n                }\n            })\n        }\n        var penalty = await Penalty.find({\n            username: req.params.username,\n            date: {\n                $gte: moment(req.query.start_date).format('YYYY-MM-DD'),\n                $lte: moment(req.query.end_date).format('YYYY-MM-DD'),\n            },\n        })\n\n        penalty.forEach(element => {\n            var val = penaltyConfig.find((item, idx) => {\n                return item.key === element.type\n            })\n            result.push({\n                type_id: val._id,\n                username: req.params.username,\n                type: element.type,\n                date: moment(element.date).format('YYYY-MM-DD'),\n                description: element.description,\n                point: val.value,\n            })\n        })\n\n        res.json(result)\n    })\n)\n\n/**\n * @api {get} /penalty/read 상벌점 전체 조회\n * @apiDescription 전체 상벌점 조회\n * @apiName penaltyReadAll\n * @apiGroup Penalty\n * @apiPermission penalty.can.read\n *\n *\n * @apiSuccess {Array} - 사용자의 상벌점 항목을 배열로 반환\n * @apiSuccess {String} type 상벌점 항목의 타입\n * @apiSuccess {String} username 상벌점 항목의 사용자\n * @apiSuccess {String} date 상벌점 항목이 기록된 날짜\n * @apiSuccess {String} description 상벌점 항목의 설명\n * @apiSuccess {Number} point 상벌점 항목의 점수\n *\n * @apiSuccessExample {json} Success-Response:\n *      HTTP/1.1 200 OK\n *      {\n *          [{\n *              type:\"지각\",\n *              username:\"admin\"\n *              date:\"2020-03-19\",\n *              description:\"지각\",\n *              point:-1\n *          }]\n *      }\n */\nrouter.get(\n    '/read', [\n        perm('penalty').can('read'),\n        validateParams,\n    ],\n    asyncRoute(async function(req, res) {\n        var result = []\n        var attendanceUser = await AttendanceUser.find()\n        var penaltyConfig = await PenaltyConfig.find()\n        if (attendanceUser != null) {\n            attendanceUser.forEach(user=>{\n                user.status.forEach(element=>{\n                        if (element.state == 'late') {\n                            var Val = penaltyConfig.find((item, idx) => {\n                                return item.key === '지각'\n                            })\n                            result.push({\n                                type_id: Val._id,\n                                username: user.name,\n                                type: '지각',\n                                date: moment(element.date).format('YYYY-MM-DD'),\n                                description: '지각',\n                                point: Val.value,\n                            })\n                        }\n                        if (element.state == 'absence') {\n                            var val = penaltyConfig.find((item, idx) => {\n                                return item.key === '결석'\n                            })\n                            result.push({\n                                type_id: val._id,\n                                username: user.name,\n                                type: '결석',\n                                date: moment(element.date).format('YYYY-MM-DD'),\n                                description: '결석',\n                                point: val.value,\n                            })\n                        }\n                })\n            })\n        }\n        var penalty = await Penalty.find()\n\n        penalty.forEach(element => {\n            var val = penaltyConfig.find((item, idx) => {\n                return item.key === element.type\n            })\n            result.push({\n                type_id: val._id,\n                username: element.username,\n                type: element.type,\n                date: moment(element.date).format('YYYY-MM-DD'),\n                description: element.description,\n                point: val.value,\n            })\n        })\n\n        res.json(result)\n    })\n)\n\n/**\n * @api {post} /penalty/write/ 상벌점 쓰기\n * @apiDescription 사용자의 상벌점 기록\n * @apiName penaltyWrite\n * @apiGroup Penalty\n * @apiPermission penalty.can.update\n *\n * @apiParam {array} users 입력할 사용자들의 아이디 배열\n * @apiParam {String} type 상벌점 항목 타입\n * @apiParam {String} description 상벌점 항목 설명\n * @apiParam {String} date 상벌점 항목 부여 날짜\n *\n * @apiParamExample {post} Request-Example:\n *      {\n *          users : {\"admin\",\"test01\"},\n *          type : \"과제 지각\",\n *          description : \"과제 지각\"\n *          date : \"2020-03-19\"\n *      }\n *\n * @apiSuccess {200} code 기록 성공시 코드\n *\n * @apiSuccessExample {json} Success-Response:\n *      HTTP/1.1 200 OK\n */\nrouter.post(\n    '/write', [\n        perm('penalty').can('update'),\n        body('type_id').isString(),\n        body('type').isString(),\n        body('date').isString(),\n        body('users').isArray(),\n        body('description').isString(),\n        validateParams,\n    ],\n    asyncRoute(async function(req, res) {\n        req.body.users.forEach(async(username)=>{\n            var penalty = new Penalty()\n            penalty.type_id = req.body.type_id\n            penalty.type = req.body.type\n            penalty.username = username\n            penalty.date = req.body.date\n            penalty.description = req.body.description\n            await penalty.save()\n        })\n        res.end()\n    })\n)\n\n/**\n * @api {delete} /penalty/delete 상벌점 삭제\n * @apiDescription 사용자의 상벌점 삭제\n * @apiName penaltyDelete\n * @apiGroup Penalty\n * @apiPermission penalty.can.update\n *\n * @apiParam {String} username 조회할 사용자의 아이디\n * @apiParam {String} type 상벌점 항목 타입\n * @apiParam {String} description 상벌점 항목 설명\n * @apiParam {String} date 상벌점 항목 부여 날짜\n *\n * @apiParamExample {delete} Request-Example:\n *      {\n *          username : \"admin\",\n *          type : \"과제 지각\",\n *          description : \"과제 지각\"\n *          date : \"2020-03-19\"\n *      }\n *\n * @apiSuccess {200} code 기록 성공시 코드\n *\n * @apiSuccessExample {json} Success-Response:\n *      HTTP/1.1 200 OK\n */\nrouter.delete(\n    '/delete', [\n        perm('penalty').can('update'),\n        query('username').isString(),\n        query('date').isString(),\n        query('type').isString(),\n        query('description').isString(),\n        validateParams,\n    ],\n    asyncRoute(async function(req, res) {\n        await Penalty.findOneAndDelete({\n            type: req.query.type,\n            username: req.query.username,\n            date: req.query.date,\n            description: req.query.description,\n        })\n        res.end()\n    })\n)\n\nexport default router"]}