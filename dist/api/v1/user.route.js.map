{"version":3,"sources":["../../../src/api/v1/user.route.js"],"names":["router","route","get","role","perm","can","custom","isPositive","optional","validateParams","req","res","query","total","User","count","page","parseInt","pagesize","find","limit","skip","users","sort","select","json","map","user","username","realname","info","roles","delete","checkUsername","params","err","Error","status","findOne","where","equals","remove","end","post","newpasswd","toString","password","save","new_password","isString","put","checkRoleTagArray","body","roletags","indexOf","includes","checkRoleTag","roletag","push","idx","splice"],"mappings":"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","file":"user.route.js","sourcesContent":["import { Router } from 'express'\nimport random from 'random-number-csprng'\nimport {\n    asyncRoute,\n    checkRoleTag,\n    checkUsername,\n    validateParams,\n    isPositive,\n    checkRoleTagArray,\n} from '../../utils/api'\nimport { param, body, query } from 'express-validator'\nimport User from '../../models/User'\nimport { getConfig } from '../../utils/config'\nimport { clearCache } from 'cachegoose'\nimport role from '../../utils/role'\n\nconst router = Router()\n\n// 유저의 전체 목록을 가져옴\nrouter.route('/').get(\n    [\n        role.perm('manageUsers').can('access'),\n        query('page')\n            .custom(isPositive)\n            .optional(),\n        query('pagesize')\n            .custom(isPositive)\n            .optional(),\n        validateParams,\n    ],\n    asyncRoute(async (req, res) => {\n        let query\n\n        const total = await User.count()\n\n        if (req.query.page) {\n            // 페이지 쿼리 존재할때\n            const page = parseInt(req.query.page)\n            const pagesize = parseInt(req.query.pagesize || 30)\n\n            query = User.find()\n                .limit(pagesize)\n                .skip((page - 1) * pagesize)\n        } else {\n            // 페이지 쿼리 없을 때\n            query = User.find()\n        }\n\n        const users = await query.sort('username').select('username info roles')\n\n        res.json({\n            total,\n            users: users.map(user => {\n                return {\n                    username: user.username,\n                    realname: user.info.realname || '',\n                    roles: user.roles,\n                }\n            }),\n        })\n    })\n)\n\n// 유저 회원탈퇴\nrouter.delete(\n    '/:username',\n    [param('username').custom(checkUsername), validateParams],\n    asyncRoute(async (req, res) => {\n        if (\n            !role.perm('manageUsers').can('access') &&\n            req.params.username === req.user.username\n        ) {\n            const err = new Error('권한이 없습니다.')\n            err.status = 403\n            throw err\n        }\n\n        if ((await getConfig('superAdmin')) == req.params.username) {\n            const err = new Error('admin 계정은 탈퇴할 수 없습니다.')\n            err.status = 403\n            throw err\n        }\n\n        const user = await User.findOne()\n            .where('username')\n            .equals(req.params.username)\n        await user.remove()\n        res.status(200).end()\n    })\n)\n\n// 비밀번호 초기화\nrouter.post(\n    '/:username/resetpassword',\n    [\n        role.perm('manageUsers').can('access'),\n        param('username').custom(checkUsername),\n        validateParams,\n    ],\n    asyncRoute(async (req, res) => {\n        const user = await User.findOne()\n            .where('username')\n            .equals(req.params.username)\n        const newpasswd =\n            (await random(11, 35)).toString(36) +\n            (await random(36 ** 7, 36 ** 8)).toString(36)\n        user.password = newpasswd\n\n        await user.save()\n\n        res.json({ new_password: newpasswd })\n    })\n)\n\n// 유저의 역할 가져오기\nrouter.get(\n    '/:username/role',\n    [\n        role.perm('role', 'user').can('read'),\n        param('username').isString(),\n        validateParams,\n    ],\n    asyncRoute(async (req, res) => {\n        const user = await User.findOne()\n            .where('username')\n            .equals(req.params.username)\n            .select('roles')\n        // .cache(0, 'USER-ROLE-' + req.user.username)\n\n        if (!user) {\n            const err = new Error('해당 유저가 없습니다.')\n            err.status = 404\n            throw err\n        }\n\n        res.json({\n            roles: user.roles,\n        })\n    })\n)\n\n// 유저의 역할 변경\nrouter.put(\n    '/:username/role',\n    [\n        role.perm('role').can('modify'),\n        param('username').custom(checkUsername),\n        body('roletags').custom(checkRoleTagArray),\n        validateParams,\n    ],\n    asyncRoute(async (req, res) => {\n        const user = await User.findOne()\n            .where('username')\n            .equals(req.params.username)\n\n        if (!user) {\n            const err = new Error('해당 유저가 없습니다.')\n            err.status = 404\n            throw err\n        }\n\n        if (req.body.roletags.indexOf('admin') < 0) {\n            if ((await getConfig('superAdmin')) == req.params.username) {\n                const err = new Error(\n                    '서버 관리자의 어드민 역할은 변경할 수 없습니다.'\n                )\n                err.status = 403\n                throw err\n            }\n        }\n\n        if (req.body.roletags.includes('default')) {\n            const err = new Error('default 역할은 변경할 수 없습니다.')\n            err.status = 403\n            throw err\n        }\n\n        user.roles = req.body.roletags\n        await user.save()\n        clearCache('USER-ROLE-' + req.user.username)\n\n        res.end()\n    })\n)\n\n// 유저의 역할 추가\nrouter.post(\n    '/:username/role',\n    [\n        role.perm('role').can('modify'),\n        // param('username').isString(),\n        param('username').custom(checkUsername),\n        body('roletag').custom(checkRoleTag),\n        validateParams,\n    ],\n    asyncRoute(async (req, res) => {\n        const user = await User.findOne()\n            .where('username')\n            .equals(req.params.username)\n\n        if (!user) {\n            const err = new Error('해당 유저가 없습니다.')\n            err.status = 404\n            throw err\n        }\n\n        if (req.body.roletag == 'default') {\n            const err = new Error('default 역할은 변경할 수 없습니다.')\n            err.status = 403\n            throw err\n        }\n\n        if (user.roles.indexOf(req.body.roletag) == -1) {\n            user.roles.push(req.body.roletag)\n            await user.save()\n        }\n        clearCache('USER-ROLE-' + req.user.username)\n        res.status(200).json({})\n    })\n)\n\n// 유저의 역할 삭제\nrouter.delete(\n    '/:username/role/:roletag',\n    [\n        role.perm('role').can('modify'),\n        param('username').custom(checkUsername),\n        param('roletag').custom(checkRoleTag),\n        validateParams,\n    ],\n    asyncRoute(async (req, res) => {\n        const user = await User.findOne()\n            .where('username')\n            .equals(req.params.username)\n\n        if (!user) {\n            const err = new Error('해당 유저가 없습니다.')\n            err.status = 404\n            throw err\n        }\n\n        if (req.params.roletag == 'admin') {\n            if ((await getConfig('superAdmin')) == req.params.username) {\n                const err = new Error(\n                    '서버 관리자의 어드민 역할은 변경할 수 없습니다.'\n                )\n                err.status = 403\n                throw err\n            }\n        }\n\n        const idx = user.roles.indexOf(req.params.roletag)\n        if (idx != -1) {\n            user.roles.splice(idx, 1)\n            await user.save()\n        }\n        clearCache('USER-ROLE-' + req.user.username)\n        res.status(200).json({})\n    })\n)\n\nexport default router\n"]}