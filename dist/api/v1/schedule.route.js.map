{"version":3,"sources":["../../../src/api/v1/schedule.route.js"],"names":["moment","require","router","get","can","req","res","schedule","Schedule","find","json","post","isArray","isString","validateParams","dayArray","body","dayList","sort","k","title","content","color","start","end","length","save","add","format","deleteOne"],"mappings":"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","file":"schedule.route.js","sourcesContent":["import Router from 'express'\nimport { asyncRoute, validateParams } from '../../utils/api'\nimport Schedule from '../../models/Schedule'\nimport { perm } from '../../utils/role'\n//import { param, body } from 'express-validator'\nimport { body } from 'express-validator'\nvar moment = require('moment')\nconst router = Router()\n\n/**\n * @api {get} /schedule/read 일정 조회\n * @apiDescription schedule Collection 에서 모든 일정을 조회 한다.\n * @apiName read\n * @apiGroup schedule\n * @apiPermission schedule.can.read\n *\n * @apiSuccess {Array} array 일정 객체 배열을 반환한다.\n * @apiSuccess {String} title 일정 제목\n * @apiSuccess {String} content 일정 내용\n * @apiSuccess {String} color 일정 색상코드\n * @apiSuccess {String} start 일정 시작 날짜\n * @apiSuccess {String} end 일정 종료 날짜\n *\n * @apiSuccessExample {json} Success-Response:\n *       HTTP/1.1 200 OK\n *      {\n *          [\n *              {\n *                  \"_id\": \"5e453f4400ee863e3c84f1ee\",\n *                  \"title\": \"스터디\",\n *                  \"content\": \"스터디\",\n *                  \"color\": \"#2196F3FF\",\n *                  \"start\": \"2020-02-26T00:00:00.000Z\",\n *                  \"end\": \"2020-02-26T00:00:00.000Z\",\n *                  \"__v\": 0\n *                },\n *                {\n *                  \"_id\": \"5e453f4400ee863e3c84f1ef\",\n *                  \"title\": \"스터디\",\n *                  \"content\": \"스터디\",\n *                  \"color\": \"#2196F3FF\",\n *                  \"start\": \"2020-02-28T00:00:00.000Z\",\n *                  \"end\": \"2020-02-28T00:00:00.000Z\",\n *                  \"__v\": 0\n *                },\n *                {\n *                  \"_id\": \"5e453f6900ee863e3c84f1f0\",\n *                  \"title\": \"Hash Code Online Qualification Round 2020\",\n *                  \"content\": \"Hash Code Online Qualification Round 2020\",\n *                  \"color\": \"#FFA726FF\",\n *                  \"start\": \"2020-02-21T00:00:00.000Z\",\n *                  \"end\": \"2020-02-21T00:00:00.000Z\",\n *                  \"__v\": 0\n *               }\n *          ]\n *      }\n */\nrouter.get(\n    '/read',\n    [perm('schedule').can('read')],\n    asyncRoute(async function(req, res) {\n        const schedule = await Schedule.find()\n        res.json(schedule)\n    })\n)\n\n/**\n * @api {post} /schedule/write 일정 추가\n * @apiDescription 일정을 추가한다. 연속된 날짜의 일정일 경우 <code>start</code>,<code>end</code>를 처리하여 하나의 일정으로 만들어 준다.\n * @apiName write\n * @apiGroup schedule\n * @apiPermission schedule.can.update\n *\n *\n * @apiParam {String} title 일정 제목\n * @apiParam {String} content 일정 내용\n * @apiParam {String} color 일정 색상\n * @apiParam {Array} dayList 날짜들을 담은 배열\n *\n * @apiParamExample {json} Request-Example:\n *      {\n *          {\n * \t            \"dayList\":[\"2020-02-11\",\"2020-02-14\",\"2020-02-15\",\"2020-02-19\"],\n * \t            \"title\":\"스터디\",\n * \t            \"content\":\"시니어 스터디\",\n *              \"color\":\"red\"\n *          }\n *      }\n *\n *\n * @apiSuccess {Number} 200 종료 코드\n *\n * @apiSuccessExample {json} Success-Response:\n *       HTTP/1.1 200 OK\n */\nrouter.post(\n    '/write',\n    [\n        perm('schedule').can('update'),\n        body('dayList').isArray(),\n        body('title').isString(),\n        body('content').isString(),\n        body('color').isString(),\n        validateParams,\n    ],\n    asyncRoute(async function(req, res) {\n        var dayArray = req.body.dayList.sort()\n        //날짜 배열을 기준으로 순회하면서 저장\n        var schedule = new Schedule()\n        for (var k in dayArray) {\n            if (k == 0) {\n                schedule.title = req.body.title\n                schedule.content = req.body.content\n                schedule.color = req.body.color\n                schedule.start = dayArray[0]\n                schedule.end = dayArray[0]\n                if (1 == req.body.dayList.length) schedule.save()\n                continue\n            }\n            if (\n                moment(schedule.end)\n                    .add(1, 'days')\n                    .format('YYYY-MM-DD') ==\n                moment(req.body.dayList[k]).format('YYYY-MM-DD')\n            ) {\n                schedule.end = dayArray[k]\n            } else {\n                await schedule.save()\n                schedule = new Schedule()\n                schedule.title = req.body.title\n                schedule.content = req.body.content\n                schedule.color = req.body.color\n                schedule.start = dayArray[k]\n                schedule.end = dayArray[k]\n            }\n            if (k == req.body.dayList.length - 1) {\n                await schedule.save()\n            }\n        }\n        res.end()\n    })\n)\n\n//관리자가 일정을 삭제함\n//body : day(String), type(string), title(string), content(string), color(string)\n// schedule 페이지에서 사용\n/**\n * @api {post} /schedule/delete 일정 삭제\n * @apiDescription 일정을 삭제한다.\n * @apiName delete\n * @apiGroup schedule\n * @apiPermission schedule.can.update\n *\n *\n * @apiParam {String} title 일정 제목\n * @apiParam {String} content 일정 내용\n * @apiParam {String} color 일정 색상\n * @apiParam {String} start 일정 시작 날짜\n * @apiParam {String} end 일정 종료 날짜\n *\n * @apiParamExample {json} Request-Example:\n *      {\n *         {\n *              \"title\": \"Hash Code Online Qualification Round 2020\",\n *              \"content\": \"Hash Code Online Qualification Round 2020\",\n *              \"color\": \"#FFA726FF\",\n *              \"start\": \"2020-02-21\",\n *              \"end\": \"2020-02-21\",\n *          }\n *      }\n *\n *\n * @apiSuccess {Number} 200 종료 코드\n *\n * @apiSuccessExample {json} Success-Response:\n *       HTTP/1.1 200 OK\n */\nrouter.post(\n    '/delete',\n    [\n        perm('schedule').can('update'),\n        body('start').isString(),\n        body('end').isString(),\n        body('title').isString(),\n        body('content').isString(),\n        body('color').isString(),\n        validateParams,\n    ],\n    asyncRoute(async function(req, res) {\n        await Schedule.deleteOne({\n            start: req.body.start,\n            end: req.body.end,\n            title: req.body.title,\n            content: req.body.content,\n            color: req.body.color,\n        })\n        res.end()\n    })\n)\n\nexport default router\n"]}