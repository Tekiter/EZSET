{"version":3,"sources":["../../../src/api/v1/config.route.js"],"names":["router","loginNotRequired","configNames","changeableConfigs","key","check","isString","isBoolean","toBoolean","custom","value","get","req","res","configs","configName","json","loginRequired","getRoleMiddleware","can","patch","map","config","optional","validateParams","body","undefined","status","end","post"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AAEA,MAAMA,SAAS,sBAAf;AACAA,OAAOC,gBAAP,GAA0B,IAA1B;;AAEA,MAAMC,cAAc,CAAC,WAAD,EAAc,YAAd,EAA4B,OAA5B,CAApB;;AAEA,MAAMC,oBAAoB,CACtB;AACIC,SAAK,WADT;AAEIC,WAAO,4BAAK,WAAL,EAAkBC,QAAlB;AAFX,CADsB,EAKtB;AACIF,SAAK,YADT;AAEIC,WAAO,4BAAK,YAAL,EACFE,SADE,GAEFC,SAFE;AAFX,CALsB,EAWtB;AACIJ,SAAK,OADT;AAEIC,WAAO,4BAAK,OAAL,EAAcI,MAAd,CAAqBC,SAAS;AACjC,YAAI,CAACA,KAAL,EAAY;AACR,mBAAO,KAAP;AACH;AACD,eAAO,IAAP;AACH,KALM;AAFX,CAXsB,CAA1B;;AAsBA;;;;;;AAMAV,OAAOW,GAAP,CACI,GADJ,EAEI,qBAAW,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC3B,UAAMC,UAAU,EAAhB;;AAEA,SAAK,IAAIC,UAAT,IAAuBb,WAAvB,EAAoC;AAChCY,gBAAQC,UAAR,IAAsB,MAAM,uBAAUA,UAAV,CAA5B;AACH;;AAEDF,QAAIG,IAAJ,cAAcF,OAAd;AACH,CARD,CAFJ;;AAaA;;;;;;AAMAd,OAAOW,GAAP,CACI,QADJ,EAEI,CAACM,mBAAD,EAAgBC,uBAAhB,EAAmC,gBAAK,cAAL,EAAqBC,GAArB,CAAyB,QAAzB,CAAnC,CAFJ,EAGI,qBAAW,OAAOP,GAAP,EAAYC,GAAZ,KAAoB;AAC3B,UAAMC,UAAU,EAAhB;;AAEA,SAAK,IAAIC,UAAT,IAAuBb,WAAvB,EAAoC;AAChCY,gBAAQC,UAAR,IAAsB,MAAM,uBAAUA,UAAV,CAA5B;AACH;;AAEDF,QAAIG,IAAJ,cAAcF,OAAd;AACH,CARD,CAHJ;;AAcA;;;;;;;;;;AAUAd,OAAOoB,KAAP,CACI,QADJ,EAEI,CACIH,mBADJ,EAEIC,uBAFJ,EAGI,gBAAK,cAAL,EAAqBC,GAArB,CAAyB,QAAzB,CAHJ,EAIIhB,kBAAkBkB,GAAlB,CAAsBC,UAAUA,OAAOjB,KAAP,CAAakB,QAAb,EAAhC,CAJJ,EAKIC,mBALJ,CAFJ,EASI,qBAAW,OAAOZ,GAAP,EAAYC,GAAZ,KAAoB;AAC3B,qBAAoBV,iBAApB,EAAuC;AAAA,YAA9B,EAAEC,GAAF,EAA8B;;AACnC,YAAIQ,IAAIa,IAAJ,CAASrB,GAAT,KAAiBsB,SAArB,EAAgC;AAC5B,kBAAM,uBAAUtB,GAAV,EAAeQ,IAAIa,IAAJ,CAASrB,GAAT,CAAf,CAAN;AACH;AACJ;;AAEDS,QAAIc,MAAJ,CAAW,GAAX,EAAgBC,GAAhB;AACH,CARD,CATJ;;AAoBA;;;;;;AAMA5B,OAAO6B,IAAP,CACI,QADJ,EAEI,CACIZ,mBADJ,EAEIC,uBAFJ,EAGI,gBAAK,cAAL,EAAqBC,GAArB,CAAyB,QAAzB,CAHJ,EAIIK,mBAJJ,CAFJ,EAQI,qBAAW,OAAOZ,GAAP,EAAYC,GAAZ,KAAoB;AAC3B,UAAM,gCAAN;AACAA,QAAIe,GAAJ;AACH,CAHD,CARJ;;kBAce5B,M","file":"config.route.js","sourcesContent":["import { Router } from 'express'\nimport { asyncRoute, validateParams } from '../../utils/api'\nimport { loginRequired } from '../../utils/auth'\nimport { getRoleMiddleware } from '../../utils/role'\nimport { perm } from '../../utils/role'\nimport { body } from 'express-validator'\nimport { getConfig, setConfig, setDefaultConfigs } from '../../utils/config'\n\nconst router = Router()\nrouter.loginNotRequired = true\n\nconst configNames = ['groupName', 'usePreUser', 'theme']\n\nconst changeableConfigs = [\n    {\n        key: 'groupName',\n        check: body('groupName').isString(),\n    },\n    {\n        key: 'usePreUser',\n        check: body('usePreUser')\n            .isBoolean()\n            .toBoolean(),\n    },\n    {\n        key: 'theme',\n        check: body('theme').custom(value => {\n            if (!value) {\n                return false\n            }\n            return true\n        }),\n    },\n]\n\n/**\n * @api {get} /config 서버 설정 가져오기\n * @apiDescription 서버의 기본 정보를 가져옴\n * @apiName ViewConfig\n * @apiGroup Config\n */\nrouter.get(\n    '/',\n    asyncRoute(async (req, res) => {\n        const configs = {}\n\n        for (let configName of configNames) {\n            configs[configName] = await getConfig(configName)\n        }\n\n        res.json({ ...configs })\n    })\n)\n\n/**\n * @api {get} /config/admin 서버 설정 가져오기 (어드민)\n * @apiDescription 서버의 모든 설정 정보를 가져옴\n * @apiName ViewAdminConfig\n * @apiGroup Config\n */\nrouter.get(\n    '/admin',\n    [loginRequired, getRoleMiddleware, perm('serverConfig').can('change')],\n    asyncRoute(async (req, res) => {\n        const configs = {}\n\n        for (let configName of configNames) {\n            configs[configName] = await getConfig(configName)\n        }\n\n        res.json({ ...configs })\n    })\n)\n\n/**\n * @api {patch} /config/admin 서버 설정 변경 (어드민)\n * @apiDescription 변경 가능한 서버의 설정 정보를 변경한다. body에 Object 로 설정값의 key: value 쌍을 넣으면 반영된다.\n * @apiName ChangeConfig\n * @apiGroup Config\n * @apiParam {String} key 바꿀 설정의 값\n * @apiParamExample {json} Request-Example:\n * {\"groupName\":\"EZSET\",\"usePreUser\":false}\n *\n */\nrouter.patch(\n    '/admin',\n    [\n        loginRequired,\n        getRoleMiddleware,\n        perm('serverConfig').can('change'),\n        changeableConfigs.map(config => config.check.optional()),\n        validateParams,\n    ],\n    asyncRoute(async (req, res) => {\n        for (let { key } of changeableConfigs) {\n            if (req.body[key] != undefined) {\n                await setConfig(key, req.body[key])\n            }\n        }\n\n        res.status(200).end()\n    })\n)\n\n/**\n * @api {get} /config/reset 서버 설정 초기화\n * @apiDescription 서버의 모든 설정 정보를 초기화\n * @apiName ResetConfig\n * @apiGroup Config\n */\nrouter.post(\n    '/reset',\n    [\n        loginRequired,\n        getRoleMiddleware,\n        perm('serverConfig').can('change'),\n        validateParams,\n    ],\n    asyncRoute(async (req, res) => {\n        await setDefaultConfigs()\n        res.end()\n    })\n)\n\nexport default router\n"]}