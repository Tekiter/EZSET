{"version":3,"sources":["../src/init.js"],"names":["initApp","PORT","DATABASE_URI","SOCKET_PORT","APM_SERVER_URL","apm","require","start","serviceName","serverUrl","console","log","err","Error","database","initialize","initialization","app","listen","error"],"mappings":";;;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAJA;kBAMe,eAAeA,OAAf,CAAuB,EAAEC,IAAF,EAAQC,YAAR,EAAsBC,WAAtB,EAAmCC,cAAnC,EAAvB,EAA4E;AACvF,QAAI;AACA;AACA,YAAG;AACH,kBAAMC,MAAMC,QAAQ,kBAAR,EAA4BC,KAA5B,CAAkC;AAC1CC,6BAAa,OAD6B;AAE1CC,2BAAWL;AAF+B,aAAlC,CAAZ;AAIAM,oBAAQC,GAAR,CAAY,8CAAZ;AACC,SAND,CAMC,OAAMC,GAAN,EAAU;AACP,kBAAMA,GAAN;AACH;;AAED,YAAI,CAACV,YAAL,EAAmB;AACf,kBAAMU,MAAM,IAAIC,KAAJ,CACR,uDADQ,CAAZ;AAGA,kBAAMD,GAAN;AACH;AACD,cAAME,mBAASC,UAAT,CAAoBb,YAApB,CAAN;AACAQ,gBAAQC,GAAR,CAAY,oCAAZ;;AAEA,cAAMK,yBAAeD,UAAf,EAAN;AACA,cAAM,wBAAWE,aAAX,EAAgBd,WAAhB,CAAN;;AAEAc,sBAAIC,MAAJ,CAAWjB,IAAX,EAAiB,MAAMS,QAAQC,GAAR,CAAa,qBAAoBV,IAAK,EAAtC,CAAvB;AACH,KAzBD,CAyBE,OAAOkB,KAAP,EAAc;AACZT,gBAAQC,GAAR,CAAY,sBAAZ;AACAD,gBAAQS,KAAR,CAAcA,KAAd;AACH;AACJ,C","file":"init.js","sourcesContent":["/* eslint-disable no-console */\nimport database from './utils/database'\nimport app from './app'\nimport initialization from './utils/initialization'\nimport { initSocket } from './utils/socket'\n\nexport default async function initApp({ PORT, DATABASE_URI, SOCKET_PORT, APM_SERVER_URL }) {\n    try {\n        //elastic apm\n        try{\n        const apm = require('elastic-apm-node').start({\n            serviceName: 'ezset',\n            serverUrl: APM_SERVER_URL,\n        })\n        console.log(\"Successfully connected to elastic-apm-server\")\n        }catch(err){\n            throw err\n        }\n\n        if (!DATABASE_URI) {\n            const err = new Error(\n                'Environment Variable \"DATABASE_URL\" has not been set.'\n            )\n            throw err\n        }\n        await database.initialize(DATABASE_URI)\n        console.log('Successfully connected to database')\n\n        await initialization.initialize()\n        await initSocket(app, SOCKET_PORT)\n\n        app.listen(PORT, () => console.log(`Listening on port ${PORT}`))\n    } catch (error) {\n        console.log('Failed to initialize')\n        console.error(error)\n    }\n}\n"]}