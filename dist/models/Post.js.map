{"version":3,"sources":["../../src/models/Post.js"],"names":["Schema","mongoose","commentSchema","content","type","String","required","writer","created_date","Date","default","now","isAnonymous","Boolean","plugin","autoIncrement","model","startAt","Comment","postSchema","board","Number","ref","title","author","view","like","isLike","comments","files","methods","likes_flag","liker","i","length","virtual","get","likes_create","push","save","likes_delete","splice","addComment","updateComment","comment_id","comment","id","removeComment","remove","getComment","module","exports"],"mappings":"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","file":"Post.js","sourcesContent":["import mongoose from 'mongoose'\nimport autoIncrement from 'mongoose-auto-increment'\nconst Schema = mongoose.Schema\n\nlet commentSchema = new Schema({\n    //댓글 구조\n    content: { type: String, required: [true, 'comment content required'] },\n    writer: { type: String, required: [true, 'comment writer required'] },\n    created_date: {\n        type: Date,\n        default: Date.now,\n    },\n    isAnonymous: {\n        type: Boolean,\n        default: false,\n    },\n})\n\ncommentSchema.plugin(autoIncrement.plugin, {\n    model: 'comment',\n    startAt: 1,\n})\nlet Comment = mongoose.model('comment', commentSchema)\n\nlet postSchema = new Schema({\n    board: {\n        type: Number,\n        startAt: 1,\n        ref: 'board',\n    },\n    title: {\n        type: String,\n        required: [true, 'post title required'],\n    },\n    content: {\n        type: String,\n        required: [true, 'post title required'],\n    },\n    author: {\n        type: String,\n        required: [true, 'post writer required'],\n    },\n    created_date: {\n        type: Date,\n        default: Date.now,\n    },\n    isAnonymous: {\n        type: Boolean,\n        default: false,\n    },\n    view: { type: Number, default: 0 },\n    like: [{ type: String }],\n    isLike: {\n        type: Boolean,\n        default: false,\n    },\n    comments: [commentSchema],\n    files: [{ type: String }],\n})\n\n//좋아요 확인\npostSchema.methods.likes_flag = function(liker) {\n    for (let i = 0; i < this.like.length; i++) {\n        if (this.like[i] == liker) {\n            return true\n        }\n    }\n    return false\n}\n\n//좋아요 카운트\npostSchema.virtual('likes_count').get(function() {\n    return this.like ? this.like.length : 0\n})\n\n//좋아요 생성\npostSchema.methods.likes_create = function(liker) {\n    for (let i = 0; i < this.like.length; i++) {\n        if (this.like[i] == liker) {\n            return\n        }\n    }\n    this.like.push(liker)\n    return this.save()\n}\n\n//좋아요 삭제\npostSchema.methods.likes_delete = function(liker) {\n    for (let i = 0; i < this.like.length; i++) {\n        if (this.like[i] == liker) {\n            this.like.splice(i, 1)\n        }\n    }\n    return this.save()\n}\n\n//댓글 작성\npostSchema.methods.addComment = function(content, writer) {\n    this.comments.push(new Comment({ content, writer }))\n    return this.save()\n}\n\n//댓글 수정\npostSchema.methods.updateComment = function(content, comment_id) {\n    this.comment = this.comments.id(comment_id)\n    this.comment.content = content\n    return this.save()\n}\n\n//댓글 삭제\npostSchema.methods.removeComment = function(comment_id) {\n    let comment = this.comments.id(comment_id)\n    comment.remove()\n    return this.save()\n}\n\n//댓글 불러오기\npostSchema.methods.getComment = function(comment_id) {\n    let comment = this.comments.id(comment_id)\n    return comment\n}\n\npostSchema.plugin(autoIncrement.plugin, 'post')\nmodule.exports = mongoose.model('post', postSchema)\n"]}