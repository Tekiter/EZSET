{"version":3,"sources":["../../src/utils/file.js"],"names":["getFileInfo","getFileInfoArray","getFilePath","increaseFileHit","setUploadExpireTimeout","checkAttachableFile","checkAttachableFileArray","applyFileLink","removeFileLink","deleteUnlinkedFile","cleanupUnlinkedFiles","deleteFile","checkIsFileOwner","checkUnlinkedFile","getFileLinks","uploadDir","process","env","FILE_UPLOAD_DIR","path","join","__dirname","fs","existsSync","mkdirSync","error","console","log","storage","multer","diskStorage","destination","req","file","cb","filename","fileobj","File","originalname","save","then","res","id","rawUpload","upload","single","field","next","middle","afterUpload","status","json","findById","size","uploader","user","username","mimetype","message","file_id","cache","undefined","timestamp","files","output","push","increaseHit","fileId","timeout","setTimeout","hasLink","Error","Array","isArray","target","ref","link","markModified","allFiles","find","map","promises","unlink","remove"],"mappings":"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","file":"file.js","sourcesContent":["/*\nfile.js\n파일 업로드와 다운로드를 관리하는 모듈\n\n*/\n\nimport fs from 'fs'\nimport path from 'path'\nimport multer from 'multer'\nimport File from '../models/File'\n\n// 파일이 저장될 디렉토리를 지정\nconst uploadDir = process.env.FILE_UPLOAD_DIR || path.join(__dirname, 'upload')\n\n// 업로드 폴더가 없을 시, 생성한다.\ntry {\n    if (!fs.existsSync(uploadDir)) {\n        fs.mkdirSync(uploadDir)\n    }\n} catch (error) {\n    console.log('Could not create file upload folder: ' + uploadDir) // eslint-disable-line no-console\n}\n\n// multer 디스크스토리지 생성\nconst storage = multer.diskStorage({\n    destination(req, file, cb) {\n        cb(null, uploadDir)\n    },\n    filename(req, file, cb) {\n        // DB에 파일 정보를 생성하고, 생성된 Document의 ID를 파일 명으로 한다.\n        const fileobj = new File({\n            filename: file.originalname,\n        })\n        fileobj.save().then(res => {\n            cb(null, fileobj.id)\n        })\n    },\n})\n\n// 파일 업로드 multer 미들웨어\n// 파일 외부에서의 직접 접근을 막는다.\nconst rawUpload = multer({ storage })\n\n// 업로드된 파일의 정보를 db에 업데이트 하기위한 미들웨어\nexport const upload = {\n    single(field) {\n        return (req, res, next) => {\n            const middle = rawUpload.single(field)\n\n            // 파일이 업로드 된 이후에 DB정보 업데이트\n            const afterUpload = () => {\n                if (!req.file) {\n                    res.status(400).json({ error: 'Invalid file upload' })\n                    return\n                }\n\n                File.findById(req.file.filename).then(file => {\n                    file.size = req.file.size\n                    file.uploader = req.user.username\n                    file.mimetype = req.file.mimetype\n                    file.save().then(() => {\n                        next()\n                    })\n                })\n            }\n\n            if (req.user) {\n                // 파일 업로드 미들웨어 실행\n                middle(req, res, afterUpload)\n            } else {\n                res.status(401).json({ message: '로그인이 필요합니다.' })\n            }\n        }\n    },\n}\n\n/**\n * 파일 ID를 기준으로 파일의 정보를 가져온다.\n * @param {ObjectID} file_id\n */\nexport async function getFileInfo(file_id) {\n    const file = await File.findById(file_id).cache()\n\n    if (!file) {\n        return undefined\n    }\n\n    return {\n        id: file_id,\n        filename: file.filename,\n        size: file.size,\n        uploader: file.uploader,\n        timestamp: file.timestamp,\n    }\n}\n\nexport async function getFileInfoArray(files) {\n    const output = []\n    for (let file of files) {\n        output.push(await getFileInfo(file))\n    }\n    return output\n}\n\n/**\n * 파일의 ID를 기준으로 실제 파일 경로를 가져온다.\n * @param {ObjectID} file_id\n */\nexport function getFilePath(file_id) {\n    return path.join(uploadDir, file_id)\n}\n\n/**\n * 파일 다운로드 횟수를 1 증가시킨다.\n * @param {ObjectID} file_id\n */\nexport async function increaseFileHit(file_id) {\n    const file = await File.findById(file_id).cache()\n    await file.increaseHit()\n}\n\nexport function setUploadExpireTimeout(fileId, timeout) {\n    setTimeout(async () => {\n        const file = await File.findById(fileId)\n        if (!file.hasLink()) {\n            await deleteFile(fileId)\n        }\n    }, timeout)\n}\n\n/**\n * 첨부가 가능한, 즉 역참조가 없는 파일인지 체크\n * @param {*} fileId 파일의 ID\n */\nexport async function checkAttachableFile(fileId) {\n    // let file\n    try {\n        await File.findById(fileId + '')\n    } catch (error) {\n        throw new Error('올바르지 않은 파일 ID 입니다.')\n    }\n\n    // if (file.hasLink()) {\n    //     throw new Error('이미 첨부된 파일입니다.')\n    // }\n\n    return true\n}\n\n/**\n * 첨부가 가능한 파일 ID의 배열인지 체크\n * @param {*} files 파일 ID들이 들어있는 배열\n */\nexport async function checkAttachableFileArray(files) {\n    if (!Array.isArray(files)) {\n        throw new Error('올바르지 않은 파일 ID 배열입니다.')\n    }\n\n    for (let fileId of files) {\n        await checkAttachableFile(fileId)\n    }\n    return true\n}\n\n/**\n * 파일 오브젝트에 역참조를 등록한다.\n * @param {*} files\n * @param {*} target\n * @param {*} ref\n */\nexport async function applyFileLink(files, target, ref) {\n    if (!Array.isArray(files)) {\n        files = [files]\n    }\n    for (let fileId of files) {\n        const file = await File.findById(fileId)\n        file.link = {\n            target,\n            ref,\n        }\n\n        file.markModified('link')\n\n        await file.save()\n    }\n}\n\n/**\n * 파일 오브젝트에 역참조를 제거한다.\n * @param {*} files\n */\nexport async function removeFileLink(files) {\n    if (!Array.isArray(files)) {\n        files = [files]\n    }\n    for (let fileId of files) {\n        const file = await File.findById(fileId)\n        file.link = {}\n\n        file.markModified('link')\n\n        await file.save()\n    }\n}\n\n/**\n * 역참조가 없는 파일을 삭제한다.\n * @param {*} files\n */\nexport async function deleteUnlinkedFile(files) {\n    if (!Array.isArray(files)) {\n        files = [files]\n    }\n    for (let fileId of files) {\n        const file = await File.findById(fileId)\n\n        if (file && !file.hasLink()) {\n            await deleteFile(fileId)\n        }\n    }\n}\n\nexport async function cleanupUnlinkedFiles() {\n    const allFiles = await File.find()\n    await deleteUnlinkedFile(\n        allFiles.map(file => {\n            return file.id\n        })\n    )\n}\n\n/**\n * 해당 파일을 삭제한다.\n * @param {*} fileId\n */\nexport async function deleteFile(fileId) {\n    try {\n        const file = await File.findById(fileId)\n        try {\n            await fs.promises.unlink(path.join(uploadDir, file.id))\n        } catch (error) {\n            //\n        }\n\n        await file.remove()\n    } catch (error) {}\n}\n\n/**\n * 파일들이 모두 특정 유저가 올린 것인지 확인한다.\n * @param {*} files 파일 ID 또는 파일 ID의 배열\n * @param {*} username 판단할 유저\n */\nexport async function checkIsFileOwner(files, username) {\n    if (!Array.isArray(files)) {\n        files = [files]\n    }\n    for (let fileId of files) {\n        const file = await File.findById(fileId)\n        if (file.uploader !== username) {\n            return false\n        }\n    }\n    return true\n}\n\n/**\n * 파일들이 모두 역참조가 존재하지 않는지 확인한다.\n * @param {*} files\n */\nexport async function checkUnlinkedFile(files) {\n    if (!Array.isArray(files)) {\n        files = [files]\n    }\n    for (let fileId of files) {\n        const file = await File.findById(fileId)\n        if (file.hasLink()) {\n            return false\n        }\n    }\n    return true\n}\n\nexport async function getFileLinks(files) {\n    if (!Array.isArray(files)) {\n        files = [files]\n    }\n    const res = []\n    for (let fileId of files) {\n        const file = await File.findById(fileId)\n        if (file.hasLink()) {\n            res.push({\n                target: file.link.target,\n                ref: file.link.ref,\n            })\n        }\n    }\n    return res\n}\n"]}