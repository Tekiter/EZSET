{"version":3,"sources":["../../../src/utils/config/index.js"],"names":["getConfig","setConfig","configAvailable","setDefaultConfigs","cache","key","defaultVal","undefined","val","Config","findOne","where","equals","value","__","config","save","count","estimatedDocumentCount","Object","keys","defaultConfigs"],"mappings":";;;;;QAKsBA,S,GAAAA,S;QAeAC,S,GAAAA,S;QAeAC,e,GAAAA,e;QAKAC,iB,GAAAA,iB;;AAxCtB;;;;AACA;;;;;;AAEA,MAAMC,QAAQ,EAAd;;AAEO,eAAeJ,SAAf,CAAyBK,GAAzB,EAA8BC,aAAaC,SAA3C,EAAsD;AACzD,QAAIH,MAAMC,GAAN,CAAJ,EAAgB;AACZ,eAAOD,MAAMC,GAAN,CAAP;AACH;AACD,QAAI;AACA,cAAMG,MAAM,MAAMC,iBAAOC,OAAP,GACbC,KADa,CACP,KADO,EAEbC,MAFa,CAENP,GAFM,CAAlB;AAGAD,cAAMC,GAAN,IAAaG,IAAIK,KAAjB;;AAEA,eAAOL,MAAMA,IAAIK,KAAV,GAAkBP,UAAzB;AACH,KAPD,CAOE,OAAOQ,EAAP,EAAW;AACT,eAAOR,UAAP;AACH;AACJ;AACM,eAAeL,SAAf,CAAyBI,GAAzB,EAA8BQ,KAA9B,EAAqC;AACxC,QAAIE,SAAS,MAAMN,iBAAOC,OAAP,GACdC,KADc,CACR,KADQ,EAEdC,MAFc,CAEPP,GAFO,CAAnB;;AAIA,QAAI,CAACU,MAAL,EAAa;AACTA,iBAAS,IAAIN,gBAAJ,CAAW,EAAEJ,GAAF,EAAX,CAAT;AACH;;AAEDU,WAAOF,KAAP,GAAeA,KAAf;;AAEA,UAAME,OAAOC,IAAP,EAAN;;AAEA,WAAOZ,MAAMC,GAAN,CAAP;AACH;AACM,eAAeH,eAAf,GAAiC;AACpC,UAAMe,QAAQ,MAAMR,iBAAOS,sBAAP,EAApB;AACA,WAAOD,UAAU,CAAjB;AACH;;AAEM,eAAed,iBAAf,GAAmC;AACtC,SAAK,IAAIE,GAAT,IAAgBc,OAAOC,IAAP,CAAYC,iBAAZ,CAAhB,EAA6C;AACzC,cAAMpB,UAAUI,GAAV,EAAegB,kBAAehB,GAAf,CAAf,CAAN;AACH;AACJ","file":"index.js","sourcesContent":["import Config from '../../models/Config'\nimport defaultConfigs from './default'\n\nconst cache = {}\n\nexport async function getConfig(key, defaultVal = undefined) {\n    if (cache[key]) {\n        return cache[key]\n    }\n    try {\n        const val = await Config.findOne()\n            .where('key')\n            .equals(key)\n        cache[key] = val.value\n\n        return val ? val.value : defaultVal\n    } catch (__) {\n        return defaultVal\n    }\n}\nexport async function setConfig(key, value) {\n    let config = await Config.findOne()\n        .where('key')\n        .equals(key)\n\n    if (!config) {\n        config = new Config({ key })\n    }\n\n    config.value = value\n\n    await config.save()\n\n    delete cache[key]\n}\nexport async function configAvailable() {\n    const count = await Config.estimatedDocumentCount()\n    return count !== 0\n}\n\nexport async function setDefaultConfigs() {\n    for (let key of Object.keys(defaultConfigs)) {\n        await setConfig(key, defaultConfigs[key])\n    }\n}\n"]}