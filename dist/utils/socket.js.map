{"version":3,"sources":["../../src/utils/socket.js"],"names":["initSocket","io","undefined","app","SOCKET_PORT","server","require","createServer","origins","curState","flag","time","on","socket","data","join","roomName","to","id","emit","msg","timerID","setInterval","clearInterval","listen","console","log"],"mappings":";;;;;QAGsBA,U,GAAAA,U;AAHtB;AACO,MAAMC,kBAAKC,SAAX;;AAEA,eAAeF,UAAf,CAA0BG,GAA1B,EAA+BC,WAA/B,EAA4C;AAC/C,UAAMC,SAASC,QAAQ,MAAR,EAAgBC,YAAhB,CAA6BJ,GAA7B,CAAf;AACA,UAAMF,KAAKK,QAAQ,WAAR,EAAqBD,MAArB,EAA4B,EAACG,SAAS,KAAV,EAA5B,CAAX;;AAEA;AACA,QAAIC,WAAW;AACXC,cAAM,KADK;AAEXC,cAAM;AAEV;AAJe,KAAf,CAKAV,GAAGW,EAAH,CAAM,YAAN,EAAoB,UAASC,MAAT,EAAiB;AACjCA,eAAOD,EAAP,CAAU,MAAV,EAAkB,UAASE,IAAT,EAAe;AAC7BD,mBAAOE,IAAP,CAAYD,KAAKE,QAAjB;AACAf,eAAGgB,EAAH,CAAMJ,OAAOK,EAAb,EAAiBC,IAAjB,CAAsB,YAAtB,EAAoCV,QAApC;AACH,SAHD;AAIA;AACAI,eAAOD,EAAP,CAAU,YAAV,EAAwB,UAASE,IAAT,EAAe;AACnCL,qBAASC,IAAT,GAAgBI,KAAKJ,IAArB;AACA,gBAAI,CAACI,KAAKJ,IAAV,EAAgBD,SAASE,IAAT,GAAgB,KAAhB;AAChB,gBAAIS,MAAM;AACNV,sBAAMI,KAAKJ,IADL;AAENC,sBAAMF,SAASE;AAEnB;AACA;AALU,aAAV,CAMAV,GAAGgB,EAAH,CAAM,YAAN,EAAoBE,IAApB,CAAyB,YAAzB,EAAuCC,GAAvC;AACH,SAVD;AAWA;;AAEAP,eAAOD,EAAP,CAAU,OAAV,EAAmB,UAASE,IAAT,EAAe;AAC9BL,qBAASE,IAAT,GAAgB,MAAhB;AACA,gBAAIU,UAAUC,YAAY,YAAW;AACjC,oBAAIb,SAASC,IAAT,IAAiB,KAArB,EAA4B;AACxBa,kCAAcF,OAAd;AACAZ,6BAASE,IAAT,GAAgB,MAAhB;AACH;AACDF,yBAASE,IAAT,IAAiB,IAAjB;AACA,oBAAIF,SAASE,IAAT,IAAiB,CAArB,EAAwB;AACpBY,kCAAcF,OAAd;AACA,wBAAIZ,SAASC,IAAT,IAAiB,IAArB,EAA2B;AACvB,4BAAIU,MAAM;AACNV,kCAAM;AADA,yBAAV;AAGAD,iCAASC,IAAT,GAAgB,KAAhB;AACAT,2BAAGgB,EAAH,CAAM,YAAN,EAAoBE,IAApB,CAAyB,YAAzB,EAAuCC,GAAvC;AACH;AACJ;AACJ,aAhBa,EAgBX,IAhBW,CAAd;AAiBH,SAnBD;AAoBH,KAvCD;AAwCA;AACAf,WAAOmB,MAAP,CAAcpB,WAAd,EAA2B,YAAW;AAClCqB,gBAAQC,GAAR,CAAa,wCAAuCtB,WAAY,EAAhE,EADkC,CACiC;AACtE,KAFD;AAGH","file":"socket.js","sourcesContent":["//socket io to Attendance\nexport const io = undefined\n\nexport async function initSocket(app, SOCKET_PORT) {\n    const server = require('http').createServer(app)\n    const io = require('socket.io')(server,{origins: '*:*'})\n\n    //Attendance State\n    var curState = {\n        flag: false,\n        time: 180000,\n    }\n    //connect event\n    io.on('connection', function(socket) {\n        socket.on('join', function(data) {\n            socket.join(data.roomName)\n            io.to(socket.id).emit('attendance', curState)\n        })\n        //attendance event lisner\n        socket.on('attendance', function(data) {\n            curState.flag = data.flag\n            if (!data.flag) curState.time = 18000\n            var msg = {\n                flag: data.flag,\n                time: curState.time,\n            }\n            //broadcast changed state\n            // socket.broadcast.to('attendance').emit('attendance', msg)\n            io.to('attendance').emit('attendance', msg)\n        })\n        //setTimeout 3m when attendance start\n\n        socket.on('start', function(data) {\n            curState.time = 180000\n            var timerID = setInterval(function() {\n                if (curState.flag == false) {\n                    clearInterval(timerID)\n                    curState.time = 180000\n                }\n                curState.time -= 1000\n                if (curState.time == 0) {\n                    clearInterval(timerID)\n                    if (curState.flag == true) {\n                        var msg = {\n                            flag: false,\n                        }\n                        curState.flag = false\n                        io.to('attendance').emit('attendance', msg)\n                    }\n                }\n            }, 1000)\n        })\n    })\n    //start socket.io server\n    server.listen(SOCKET_PORT, function() {\n        console.log(`[socket io] server listening on port ${SOCKET_PORT}`) // eslint-disable-line no-console\n    })\n}\n"]}