{"version":3,"sources":["../../../src/utils/role/index.js"],"names":["roles","RoleSystem","role","getRoleMiddleware","req","res","next","user","User","findOne","where","equals","username","select","cache","perm","createPermChecker","resource","params","middleware","verb","action","type","err","Error","status","can","canOwn","canAny","cannot","cannotAny","cannotOwn","permOr","callback","getRoleNames","roleNames","createRole","name","newtag","toString","hasRole","setRole","tag","newrole","export","newroledoc","save","removeRole","roletag","dbrole","RoleModel","users","find","idx","indexOf","splice","remove","updateRole","loadRoles","roleobjs","hasDefault","forEach","getUserRoles","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["import RoleModel from '../../models/Role'\nimport { RoleSystem } from '../../libs/role'\nimport random from 'random-number-csprng'\nimport { setDefaultRole, setAdminRole } from './default'\nimport User from '../../models/User'\n\nconst roles = new RoleSystem()\n\nconst role = {\n    roles,\n    async getRoleMiddleware(req, res, next) {\n        if (req.user) {\n            const user = await User.findOne()\n                .where('username')\n                .equals(req.user.username)\n                .select('roles')\n                .cache(60, 'USER-ROLE-' + req.user.username)\n            req.user.perm = roles.createPermChecker(['default', ...user.roles])\n            next()\n        } else {\n            next()\n        }\n    },\n    perm(resource, params) {\n        const middleware = (verb, action, type) => {\n            return (req, res, next) => {\n                if (req.user.perm(resource, params)[verb](action, type)) {\n                    next()\n                } else {\n                    const err = new Error('권한이 없습니다.')\n                    err.status = 403\n                    throw err\n                }\n            }\n        }\n\n        return {\n            can(action, type) {\n                return middleware('can', action, type)\n            },\n            canOwn(action, type) {\n                return middleware('canOwn', action, type)\n            },\n            canAny(action, type) {\n                return middleware('canAny', action, type)\n            },\n            cannot(action, type) {\n                return middleware('cannot', action, type)\n            },\n            cannotAny(action, type) {\n                return middleware('cannotAny', action, type)\n            },\n            cannotOwn(action, type) {\n                return middleware('cannotOwn', action, type)\n            },\n        }\n    },\n    permOr(callback) {\n        return (req, res, next) => {\n            if (callback(req.user.perm)) {\n                next()\n            } else {\n                const err = new Error('권한이 없습니다.')\n                err.status = 403\n                throw err\n            }\n        }\n    },\n    async getRoleNames() {\n        return roles.roleNames()\n    },\n    async createRole({ name }) {\n        let newtag\n        do {\n            newtag = (await random(0x100, 0x99999)).toString(16)\n        } while (roles.hasRole(newtag))\n\n        roles.setRole({ tag: newtag, name, perm: {} })\n        const newrole = roles.export(newtag)\n\n        const newroledoc = RoleModel({\n            tag: newtag,\n            name: newrole.name,\n            perm: newrole.perm,\n        })\n        await newroledoc.save()\n\n        return newrole\n    },\n    async removeRole(roletag) {\n        // db에 저장된 role 정보 가져오기\n        const dbrole = await RoleModel.findOne()\n            .where('tag')\n            .equals(roletag)\n\n        // 해당 role을 가진 모든 유저 가져오기\n        const users = await User.find({ roles: roletag }).select(\n            'username roles'\n        )\n\n        // 해당 role을 유저에서 제거\n        for (let user of users) {\n            const idx = user.roles.indexOf(roletag)\n            if (idx < 0) {\n                throw new Error('Remove role error')\n            }\n            user.roles.splice(idx, 1)\n            await user.save()\n        }\n\n        // db에서 role 제거\n        await dbrole.remove()\n\n        // 메모리의 role 제거\n        roles.removeRole(roletag)\n    },\n    async updateRole(roletag) {\n        const dbrole = await RoleModel.findOne()\n            .where('tag')\n            .equals(roletag)\n\n        const newrole = roles.export(roletag)\n        dbrole.name = newrole.name\n        dbrole.perm = newrole.perm\n\n        await dbrole.save()\n    },\n    async loadRoles() {\n        const roleobjs = await RoleModel.find()\n        let hasDefault = false\n        roleobjs.forEach(role => {\n            if (role.tag === 'default') {\n                hasDefault = true\n            }\n            roles.setRole({\n                tag: role.tag,\n                name: role.name,\n                perm: role.perm,\n            })\n        })\n        if (!hasDefault) {\n            setDefaultRole(roles)\n            const newrole = roles.export('default')\n            const newroledoc = RoleModel({\n                tag: newrole.tag,\n                name: newrole.name,\n                perm: newrole.perm,\n            })\n            await newroledoc.save()\n        }\n        setAdminRole(roles)\n    },\n    async getUserRoles(username) {\n        const user = await User.findOne()\n            .where('username')\n            .equals(username)\n            .select('roles')\n        return user.roles\n    },\n}\n\nmodule.exports = role\n"]}