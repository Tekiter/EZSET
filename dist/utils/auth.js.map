{"version":3,"sources":["../../src/utils/auth.js"],"names":["auth","hashPassword","password","bcrypt","hashSync","checkPassword","hash","compareSync","createAccessToken","username","roles","Promise","resolve","reject","jwt","sign","process","env","JWT_SECRET","expiresIn","err","encoded","checkToken","token","verify","decoded","createEditToken","is_edit_token","loginRequired","req","res","next","headers","authorization","tokenbase","split","user","error","status","json","message","superAdminRequired","f","module","exports","default"],"mappings":"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","file":"auth.js","sourcesContent":["import bcrypt from 'bcrypt-nodejs'\nimport jwt from 'jsonwebtoken'\nimport { getConfig } from '../utils/config'\n\nconst auth = {\n    hashPassword(password) {\n        return bcrypt.hashSync(password)\n    },\n    checkPassword(password, hash) {\n        return bcrypt.compareSync(password, hash)\n    },\n    createAccessToken({ username, roles }) {\n        return new Promise(function(resolve, reject) {\n            jwt.sign(\n                {\n                    username,\n                    roles,\n                },\n                process.env.JWT_SECRET,\n                { expiresIn: 86400 },\n                function(err, encoded) {\n                    if (!err) {\n                        resolve(encoded)\n                    } else {\n                        reject(err)\n                    }\n                }\n            )\n        })\n    },\n    //accessToken이 유효한지 확인\n    checkToken(token) {\n        return new Promise(function(resolve, reject) {\n            jwt.verify(token, process.env.JWT_SECRET, function(err, decoded) {\n                if (!err) {\n                    resolve(decoded)\n                } else {\n                    reject(err)\n                }\n            })\n        })\n    },\n    //민감한 개인정보를 수정,관리하기 위한 토큰\n    createEditToken(username) {\n        return new Promise(function(resolve, reject) {\n            jwt.sign(\n                {\n                    username,\n                    is_edit_token: true,\n                },\n                process.env.JWT_SECRET,\n                { expiresIn: 300 },\n                function(err, encoded) {\n                    if (!err) {\n                        resolve(encoded)\n                    } else {\n                        reject(err)\n                    }\n                }\n            )\n        })\n    },\n    async loginRequired(req, res, next) {\n        if (req.headers && req.headers.authorization) {\n            let tokenbase = req.headers.authorization.split(' ')\n            if (tokenbase[0] === 'Bearer') {\n                try {\n                    const user = await auth.checkToken(tokenbase[1])\n                    req.user = user\n                    next()\n                    return\n                } catch (error) {\n                    res.status(401).json({ message: '로그인이 필요합니다.' })\n                    return\n                }\n            }\n        }\n        res.status(401).json({ message: '로그인이 필요합니다.' })\n    },\n    async superAdminRequired(req, res, next) {\n        const f = async () => {\n            if (req.user.username === (await getConfig('superAdmin'))) {\n                next()\n            } else {\n                res.status(403).json({ message: '권한이 부족합니다.' })\n            }\n        }\n\n        if (req.user) {\n            await f()\n        } else {\n            auth.loginRequired(req, res, f)\n        }\n    },\n}\n\nmodule.exports.default = auth\nmodule.exports = auth\n"]}