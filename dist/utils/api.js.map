{"version":3,"sources":["../../src/utils/api.js"],"names":["databaseError","unexpectedError","validateParams","checkUsername","checkRoleTag","checkRoleTagArray","isPositive","validationResult","require","asyncRoute","fn","args","catch","res","error","errfunc","err","status","json","message","console","log","req","next","errors","isEmpty","array","value","user","User","findOne","where","equals","Error","role","roles","hasRole","Array","isArray","roletag","intval","parseInt"],"mappings":";;;;;;QAOgBA,a,GAAAA,a;QAaAC,e,GAAAA,e;QAaAC,c,GAAAA,c;QAiBMC,a,GAAAA,a;QAeAC,Y,GAAAA,Y;QAYAC,iB,GAAAA,iB;QAcNC,U,GAAAA,U;;AAzFhB;;;;AACA;;;;;;AAHA;AACA,MAAM,EAAEC,gBAAF,KAAuBC,QAAQ,mBAAR,CAA7B;AAIO,MAAMC,kCAAaC,MAAM,CAAC,GAAGC,IAAJ,KAAaD,GAAG,GAAGC,IAAN,EAAYC,KAAZ,CAAkBD,KAAK,CAAL,CAAlB,CAAtC;;AAEA,SAASX,aAAT,CAAuBa,GAAvB,EAA4BC,KAA5B,EAAmC;AACtC,UAAMC,UAAUC,OAAO;AACnB;AACAH,YAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,gBAAX,EAArB;AACH,KAHD;;AAKA,QAAIL,KAAJ,EAAW;AACPC,gBAAQD,KAAR;AACH,KAFD,MAEO;AACH,eAAOC,OAAP;AACH;AACJ;;AAEM,SAASd,eAAT,CAAyBY,GAAzB,EAA8BC,KAA9B,EAAqC;AACxC,UAAMC,UAAUC,OAAO;AACnBI,gBAAQC,GAAR,CAAYL,GAAZ;AACAH,YAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,kBAAX,EAArB;AACH,KAHD;;AAKA,QAAIL,KAAJ,EAAW;AACPC,gBAAQD,KAAR;AACH,KAFD,MAEO;AACH,eAAOC,OAAP;AACH;AACJ;;AAEM,SAASb,cAAT,CAAwBoB,GAAxB,EAA6BT,GAA7B,EAAkCU,IAAlC,EAAwC;AAC3C,UAAMC,SAASjB,iBAAiBe,GAAjB,CAAf;AACA,QAAI,CAACE,OAAOC,OAAP,EAAL,EAAuB;AACnBZ,YAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEM,QAAQA,OAAOE,KAAP,EAAV,EAArB;AACA,eAAO,KAAP;AACH,KAHD,MAGO;AACH,YAAIH,IAAJ,EAAU;AACNA;AACH;AACD,eAAO,IAAP;AACH;AACJ;;AAED;;;;AAIO,eAAepB,aAAf,CAA6BwB,KAA7B,EAAoC;AACvC,UAAMC,OAAO,MAAMC,eAAKC,OAAL,GACdC,KADc,CACR,UADQ,EAEdC,MAFc,CAEPL,KAFO,CAAnB;AAGA,QAAIC,IAAJ,EAAU;AACN,eAAO,IAAP;AACH,KAFD,MAEO;AACH,cAAM,IAAIK,KAAJ,CAAU,iBAAV,CAAN;AACH;AACJ;;AAED;;;;AAIO,eAAe7B,YAAf,CAA4BuB,KAA5B,EAAmC;AACtC,QAAIO,eAAKC,KAAL,CAAWC,OAAX,CAAmBT,KAAnB,CAAJ,EAA+B;AAC3B,eAAO,IAAP;AACH,KAFD,MAEO;AACH,cAAM,IAAIM,KAAJ,CAAU,uBAAV,CAAN;AACH;AACJ;;AAED;;;;AAIO,eAAe5B,iBAAf,CAAiCsB,KAAjC,EAAwC;AAC3C,QAAI,CAACU,MAAMC,OAAN,CAAcX,KAAd,CAAL,EAA2B;AACvB,cAAM,IAAIM,KAAJ,CAAU,qBAAV,CAAN;AACH;AACD,SAAK,IAAIM,OAAT,IAAoBZ,KAApB,EAA2B;AACvB,cAAMvB,aAAamC,OAAb,CAAN;AACH;AACD,WAAO,IAAP;AACH;;AAED;;;;AAIO,SAASjC,UAAT,CAAoBqB,KAApB,EAA2B;AAC9B,UAAMa,SAASC,SAASd,KAAT,CAAf;AACA,QAAIa,MAAJ,EAAY;AACR,eAAOA,UAAU,CAAjB;AACH;AACD,WAAO,KAAP;AACH","file":"api.js","sourcesContent":["/* eslint-disable no-console */\nconst { validationResult } = require('express-validator')\nimport role from './role'\nimport User from '../models/User'\n\nexport const asyncRoute = fn => (...args) => fn(...args).catch(args[2])\n\nexport function databaseError(res, error) {\n    const errfunc = err => {\n        // console.log(err)\n        res.status(500).json({ message: 'database error' })\n    }\n\n    if (error) {\n        errfunc(error)\n    } else {\n        return errfunc\n    }\n}\n\nexport function unexpectedError(res, error) {\n    const errfunc = err => {\n        console.log(err)\n        res.status(500).json({ message: 'unexpected error' })\n    }\n\n    if (error) {\n        errfunc(error)\n    } else {\n        return errfunc\n    }\n}\n\nexport function validateParams(req, res, next) {\n    const errors = validationResult(req)\n    if (!errors.isEmpty()) {\n        res.status(400).json({ errors: errors.array() })\n        return false\n    } else {\n        if (next) {\n            next()\n        }\n        return true\n    }\n}\n\n/**\n * 유저의 아이디가 존재하는지 검사하는 함수\n * @example param('username').custom(checkUsername)\n */\nexport async function checkUsername(value) {\n    const user = await User.findOne()\n        .where('username')\n        .equals(value)\n    if (user) {\n        return true\n    } else {\n        throw new Error('존재하지 않는 아이디입니다.')\n    }\n}\n\n/**\n * RoleTag 가 존재하는지 검사하는 함수\n * @example param('username').custom(checkRoleTag)\n */\nexport async function checkRoleTag(value) {\n    if (role.roles.hasRole(value)) {\n        return true\n    } else {\n        throw new Error('존재하지 않는 Role Tag 입니다.')\n    }\n}\n\n/**\n * RoleTag 들의 배열이 올바른지 검사하는 함수\n * @example param('username').custom(checkRoleTag)\n */\nexport async function checkRoleTagArray(value) {\n    if (!Array.isArray(value)) {\n        throw new Error('올바르지 않은 Role 배열입니다.')\n    }\n    for (let roletag of value) {\n        await checkRoleTag(roletag)\n    }\n    return true\n}\n\n/**\n * RoleTag 가 존재하는지 검사하는 함수\n * @example param('username').custom(checkRoleTag)\n */\nexport function isPositive(value) {\n    const intval = parseInt(value)\n    if (intval) {\n        return intval >= 0\n    }\n    return false\n}\n"]}